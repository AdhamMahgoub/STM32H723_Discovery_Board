
stm32h723_nucleo144.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a4c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005d18  08005d18  00006d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005d50  08005d50  00006d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005d58  08005d58  00006d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005d5c  08005d5c  00006d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08005d60  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08005d70  00007010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08005dd0  00007070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  240000d0  08005e30  000070d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000274  08005e30  00007274  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000070d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cbb  00000000  00000000  000070fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e03  00000000  00000000  0001cdb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00006c12  00000000  00000000  0001ebbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  000257d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b78  00000000  00000000  000263f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032168  00000000  00000000  00026f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fe79  00000000  00000000  000590d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00145339  00000000  00000000  00068f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001ae282  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032a4  00000000  00000000  001ae2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08005d00 	.word	0x08005d00

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	08005d00 	.word	0x08005d00

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fc52 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f81a 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 f928 	bl	800085c <MX_GPIO_Init>
  MX_ETH_Init();
 800060c:	f000 f886 	bl	800071c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000610:	f000 f8d0 	bl	80007b4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000614:	f000 f91a 	bl	800084c <MX_USB_OTG_HS_USB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000618:	2101      	movs	r1, #1
 800061a:	4806      	ldr	r0, [pc, #24]	@ (8000634 <main+0x38>)
 800061c:	f001 fbe7 	bl	8001dee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8000620:	2102      	movs	r1, #2
 8000622:	4805      	ldr	r0, [pc, #20]	@ (8000638 <main+0x3c>)
 8000624:	f001 fbe3 	bl	8001dee <HAL_GPIO_TogglePin>

	HAL_Delay(1000);
 8000628:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800062c:	f000 fcce 	bl	8000fcc <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000630:	bf00      	nop
 8000632:	e7f1      	b.n	8000618 <main+0x1c>
 8000634:	58020400 	.word	0x58020400
 8000638:	58021000 	.word	0x58021000

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b09c      	sub	sp, #112	@ 0x70
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000646:	224c      	movs	r2, #76	@ 0x4c
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f005 fb2c 	bl	8005ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2220      	movs	r2, #32
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f005 fb26 	bl	8005ca8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800065c:	2002      	movs	r0, #2
 800065e:	f001 fbe1 	bl	8001e24 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	4b2c      	ldr	r3, [pc, #176]	@ (8000718 <SystemClock_Config+0xdc>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	4a2b      	ldr	r2, [pc, #172]	@ (8000718 <SystemClock_Config+0xdc>)
 800066c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000670:	6193      	str	r3, [r2, #24]
 8000672:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <SystemClock_Config+0xdc>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800067e:	bf00      	nop
 8000680:	4b25      	ldr	r3, [pc, #148]	@ (8000718 <SystemClock_Config+0xdc>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000688:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800068c:	d1f8      	bne.n	8000680 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800068e:	2321      	movs	r3, #33	@ 0x21
 8000690:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000692:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000696:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80006a8:	f240 1313 	movw	r3, #275	@ 0x113
 80006ac:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b2:	2304      	movs	r3, #4
 80006b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006ba:	2304      	movs	r3, #4
 80006bc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006be:	2300      	movs	r3, #0
 80006c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 fbe4 	bl	8001e98 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006d6:	f000 f9bd 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	233f      	movs	r3, #63	@ 0x3f
 80006dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2303      	movs	r3, #3
 80006e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006e6:	2308      	movs	r3, #8
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006ea:	2340      	movs	r3, #64	@ 0x40
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006ee:	2340      	movs	r3, #64	@ 0x40
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006f8:	2340      	movs	r3, #64	@ 0x40
 80006fa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2103      	movs	r1, #3
 8000700:	4618      	mov	r0, r3
 8000702:	f001 ffa3 	bl	800264c <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800070c:	f000 f9a2 	bl	8000a54 <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3770      	adds	r7, #112	@ 0x70
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	58024800 	.word	0x58024800

0800071c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000720:	4b1e      	ldr	r3, [pc, #120]	@ (800079c <MX_ETH_Init+0x80>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	@ (80007a0 <MX_ETH_Init+0x84>)
 8000724:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000726:	4b1f      	ldr	r3, [pc, #124]	@ (80007a4 <MX_ETH_Init+0x88>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800072c:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <MX_ETH_Init+0x88>)
 800072e:	2280      	movs	r2, #128	@ 0x80
 8000730:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000732:	4b1c      	ldr	r3, [pc, #112]	@ (80007a4 <MX_ETH_Init+0x88>)
 8000734:	22e1      	movs	r2, #225	@ 0xe1
 8000736:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000738:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <MX_ETH_Init+0x88>)
 800073a:	2200      	movs	r2, #0
 800073c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800073e:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <MX_ETH_Init+0x88>)
 8000740:	2200      	movs	r2, #0
 8000742:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000744:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <MX_ETH_Init+0x88>)
 8000746:	2200      	movs	r2, #0
 8000748:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800074a:	4b14      	ldr	r3, [pc, #80]	@ (800079c <MX_ETH_Init+0x80>)
 800074c:	4a15      	ldr	r2, [pc, #84]	@ (80007a4 <MX_ETH_Init+0x88>)
 800074e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000750:	4b12      	ldr	r3, [pc, #72]	@ (800079c <MX_ETH_Init+0x80>)
 8000752:	2201      	movs	r2, #1
 8000754:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <MX_ETH_Init+0x80>)
 8000758:	4a13      	ldr	r2, [pc, #76]	@ (80007a8 <MX_ETH_Init+0x8c>)
 800075a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800075c:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <MX_ETH_Init+0x80>)
 800075e:	4a13      	ldr	r2, [pc, #76]	@ (80007ac <MX_ETH_Init+0x90>)
 8000760:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <MX_ETH_Init+0x80>)
 8000764:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000768:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800076a:	480c      	ldr	r0, [pc, #48]	@ (800079c <MX_ETH_Init+0x80>)
 800076c:	f000 fd4a 	bl	8001204 <HAL_ETH_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000776:	f000 f96d 	bl	8000a54 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800077a:	2238      	movs	r2, #56	@ 0x38
 800077c:	2100      	movs	r1, #0
 800077e:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <MX_ETH_Init+0x94>)
 8000780:	f005 fa92 	bl	8005ca8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_ETH_Init+0x94>)
 8000786:	2221      	movs	r2, #33	@ 0x21
 8000788:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_ETH_Init+0x94>)
 800078c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000790:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000792:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <MX_ETH_Init+0x94>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	24000124 	.word	0x24000124
 80007a0:	40028000 	.word	0x40028000
 80007a4:	24000268 	.word	0x24000268
 80007a8:	24000070 	.word	0x24000070
 80007ac:	24000010 	.word	0x24000010
 80007b0:	240000ec 	.word	0x240000ec

080007b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b8:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <MX_USART3_UART_Init+0x90>)
 80007ba:	4a23      	ldr	r2, [pc, #140]	@ (8000848 <MX_USART3_UART_Init+0x94>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007be:	4b21      	ldr	r3, [pc, #132]	@ (8000844 <MX_USART3_UART_Init+0x90>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000844 <MX_USART3_UART_Init+0x90>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000844 <MX_USART3_UART_Init+0x90>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <MX_USART3_UART_Init+0x90>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <MX_USART3_UART_Init+0x90>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <MX_USART3_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b17      	ldr	r3, [pc, #92]	@ (8000844 <MX_USART3_UART_Init+0x90>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ea:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <MX_USART3_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_USART3_UART_Init+0x90>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f6:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <MX_USART3_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007fc:	4811      	ldr	r0, [pc, #68]	@ (8000844 <MX_USART3_UART_Init+0x90>)
 80007fe:	f004 f873 	bl	80048e8 <HAL_UART_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000808:	f000 f924 	bl	8000a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080c:	2100      	movs	r1, #0
 800080e:	480d      	ldr	r0, [pc, #52]	@ (8000844 <MX_USART3_UART_Init+0x90>)
 8000810:	f005 f97f 	bl	8005b12 <HAL_UARTEx_SetTxFifoThreshold>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800081a:	f000 f91b 	bl	8000a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081e:	2100      	movs	r1, #0
 8000820:	4808      	ldr	r0, [pc, #32]	@ (8000844 <MX_USART3_UART_Init+0x90>)
 8000822:	f005 f9b4 	bl	8005b8e <HAL_UARTEx_SetRxFifoThreshold>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800082c:	f000 f912 	bl	8000a54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <MX_USART3_UART_Init+0x90>)
 8000832:	f005 f935 	bl	8005aa0 <HAL_UARTEx_DisableFifoMode>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800083c:	f000 f90a 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	240001d4 	.word	0x240001d4
 8000848:	40004800 	.word	0x40004800

0800084c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08c      	sub	sp, #48	@ 0x30
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	4b71      	ldr	r3, [pc, #452]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 8000874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000878:	4a6f      	ldr	r2, [pc, #444]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000882:	4b6d      	ldr	r3, [pc, #436]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 8000884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	61bb      	str	r3, [r7, #24]
 800088e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000890:	4b69      	ldr	r3, [pc, #420]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 8000892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000896:	4a68      	ldr	r2, [pc, #416]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800089c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008a0:	4b65      	ldr	r3, [pc, #404]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 80008a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b62      	ldr	r3, [pc, #392]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 80008b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b4:	4a60      	ldr	r2, [pc, #384]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008be:	4b5e      	ldr	r3, [pc, #376]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 80008c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008cc:	4b5a      	ldr	r3, [pc, #360]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 80008ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d2:	4a59      	ldr	r2, [pc, #356]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008dc:	4b56      	ldr	r3, [pc, #344]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 80008de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ea:	4b53      	ldr	r3, [pc, #332]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 80008ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f0:	4a51      	ldr	r2, [pc, #324]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 80008f2:	f043 0308 	orr.w	r3, r3, #8
 80008f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008fa:	4b4f      	ldr	r3, [pc, #316]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 80008fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000900:	f003 0308 	and.w	r3, r3, #8
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000908:	4b4b      	ldr	r3, [pc, #300]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 800090a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090e:	4a4a      	ldr	r2, [pc, #296]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 8000910:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000914:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000918:	4b47      	ldr	r3, [pc, #284]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 800091a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000926:	4b44      	ldr	r3, [pc, #272]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092c:	4a42      	ldr	r2, [pc, #264]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 800092e:	f043 0310 	orr.w	r3, r3, #16
 8000932:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000936:	4b40      	ldr	r3, [pc, #256]	@ (8000a38 <MX_GPIO_Init+0x1dc>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093c:	f003 0310 	and.w	r3, r3, #16
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	f244 0101 	movw	r1, #16385	@ 0x4001
 800094a:	483c      	ldr	r0, [pc, #240]	@ (8000a3c <MX_GPIO_Init+0x1e0>)
 800094c:	f001 fa36 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000956:	483a      	ldr	r0, [pc, #232]	@ (8000a40 <MX_GPIO_Init+0x1e4>)
 8000958:	f001 fa30 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2102      	movs	r1, #2
 8000960:	4838      	ldr	r0, [pc, #224]	@ (8000a44 <MX_GPIO_Init+0x1e8>)
 8000962:	f001 fa2b 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000966:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4833      	ldr	r0, [pc, #204]	@ (8000a48 <MX_GPIO_Init+0x1ec>)
 800097c:	f001 f876 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000980:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4828      	ldr	r0, [pc, #160]	@ (8000a3c <MX_GPIO_Init+0x1e0>)
 800099a:	f001 f867 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800099e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4822      	ldr	r0, [pc, #136]	@ (8000a40 <MX_GPIO_Init+0x1e4>)
 80009b8:	f001 f858 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009bc:	2380      	movs	r3, #128	@ 0x80
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	481e      	ldr	r0, [pc, #120]	@ (8000a4c <MX_GPIO_Init+0x1f0>)
 80009d2:	f001 f84b 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4819      	ldr	r0, [pc, #100]	@ (8000a50 <MX_GPIO_Init+0x1f4>)
 80009ec:	f001 f83e 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80009f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a02:	230a      	movs	r3, #10
 8000a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4810      	ldr	r0, [pc, #64]	@ (8000a50 <MX_GPIO_Init+0x1f4>)
 8000a0e:	f001 f82d 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a12:	2302      	movs	r3, #2
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4806      	ldr	r0, [pc, #24]	@ (8000a44 <MX_GPIO_Init+0x1e8>)
 8000a2a:	f001 f81f 	bl	8001a6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2e:	bf00      	nop
 8000a30:	3730      	adds	r7, #48	@ 0x30
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	58024400 	.word	0x58024400
 8000a3c:	58020400 	.word	0x58020400
 8000a40:	58020c00 	.word	0x58020c00
 8000a44:	58021000 	.word	0x58021000
 8000a48:	58020800 	.word	0x58020800
 8000a4c:	58021800 	.word	0x58021800
 8000a50:	58020000 	.word	0x58020000

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <Error_Handler+0x8>

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <HAL_MspInit+0x30>)
 8000a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a6c:	4a08      	ldr	r2, [pc, #32]	@ (8000a90 <HAL_MspInit+0x30>)
 8000a6e:	f043 0302 	orr.w	r3, r3, #2
 8000a72:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_MspInit+0x30>)
 8000a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a7c:	f003 0302 	and.w	r3, r3, #2
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	58024400 	.word	0x58024400

08000a94 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08e      	sub	sp, #56	@ 0x38
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a59      	ldr	r2, [pc, #356]	@ (8000c18 <HAL_ETH_MspInit+0x184>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	f040 80ab 	bne.w	8000c0e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ab8:	4b58      	ldr	r3, [pc, #352]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000aba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000abe:	4a57      	ldr	r2, [pc, #348]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000ac0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ac4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ac8:	4b54      	ldr	r3, [pc, #336]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000aca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ace:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ad2:	623b      	str	r3, [r7, #32]
 8000ad4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000ad6:	4b51      	ldr	r3, [pc, #324]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000ad8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000adc:	4a4f      	ldr	r2, [pc, #316]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000ade:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ae2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ae6:	4b4d      	ldr	r3, [pc, #308]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000ae8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000aec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000af0:	61fb      	str	r3, [r7, #28]
 8000af2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000af4:	4b49      	ldr	r3, [pc, #292]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000af6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000afa:	4a48      	ldr	r2, [pc, #288]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b00:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b04:	4b45      	ldr	r3, [pc, #276]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000b06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b0e:	61bb      	str	r3, [r7, #24]
 8000b10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b42      	ldr	r3, [pc, #264]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b18:	4a40      	ldr	r2, [pc, #256]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000b1a:	f043 0304 	orr.w	r3, r3, #4
 8000b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b22:	4b3e      	ldr	r3, [pc, #248]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b3a      	ldr	r3, [pc, #232]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b36:	4a39      	ldr	r2, [pc, #228]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b40:	4b36      	ldr	r3, [pc, #216]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b33      	ldr	r3, [pc, #204]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b54:	4a31      	ldr	r2, [pc, #196]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000b56:	f043 0302 	orr.w	r3, r3, #2
 8000b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b72:	4a2a      	ldr	r2, [pc, #168]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000b74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7c:	4b27      	ldr	r3, [pc, #156]	@ (8000c1c <HAL_ETH_MspInit+0x188>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b8a:	2332      	movs	r3, #50	@ 0x32
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9a:	230b      	movs	r3, #11
 8000b9c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	481e      	ldr	r0, [pc, #120]	@ (8000c20 <HAL_ETH_MspInit+0x18c>)
 8000ba6:	f000 ff61 	bl	8001a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000baa:	2386      	movs	r3, #134	@ 0x86
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bba:	230b      	movs	r3, #11
 8000bbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4817      	ldr	r0, [pc, #92]	@ (8000c24 <HAL_ETH_MspInit+0x190>)
 8000bc6:	f000 ff51 	bl	8001a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bdc:	230b      	movs	r3, #11
 8000bde:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	4810      	ldr	r0, [pc, #64]	@ (8000c28 <HAL_ETH_MspInit+0x194>)
 8000be8:	f000 ff40 	bl	8001a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bec:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfe:	230b      	movs	r3, #11
 8000c00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	4808      	ldr	r0, [pc, #32]	@ (8000c2c <HAL_ETH_MspInit+0x198>)
 8000c0a:	f000 ff2f 	bl	8001a6c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000c0e:	bf00      	nop
 8000c10:	3738      	adds	r7, #56	@ 0x38
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40028000 	.word	0x40028000
 8000c1c:	58024400 	.word	0x58024400
 8000c20:	58020800 	.word	0x58020800
 8000c24:	58020000 	.word	0x58020000
 8000c28:	58020400 	.word	0x58020400
 8000c2c:	58021800 	.word	0x58021800

08000c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b0b8      	sub	sp, #224	@ 0xe0
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	22b8      	movs	r2, #184	@ 0xb8
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f005 f829 	bl	8005ca8 <memset>
  if(huart->Instance==USART3)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a27      	ldr	r2, [pc, #156]	@ (8000cf8 <HAL_UART_MspInit+0xc8>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d146      	bne.n	8000cee <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c60:	f04f 0202 	mov.w	r2, #2
 8000c64:	f04f 0300 	mov.w	r3, #0
 8000c68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c72:	f107 0310 	add.w	r3, r7, #16
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 f874 	bl	8002d64 <HAL_RCCEx_PeriphCLKConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c82:	f7ff fee7 	bl	8000a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c86:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <HAL_UART_MspInit+0xcc>)
 8000c88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cfc <HAL_UART_MspInit+0xcc>)
 8000c8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c92:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <HAL_UART_MspInit+0xcc>)
 8000c98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca4:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <HAL_UART_MspInit+0xcc>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000caa:	4a14      	ldr	r2, [pc, #80]	@ (8000cfc <HAL_UART_MspInit+0xcc>)
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <HAL_UART_MspInit+0xcc>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cba:	f003 0308 	and.w	r3, r3, #8
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000cc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cc6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cdc:	2307      	movs	r3, #7
 8000cde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	@ (8000d00 <HAL_UART_MspInit+0xd0>)
 8000cea:	f000 febf 	bl	8001a6c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000cee:	bf00      	nop
 8000cf0:	37e0      	adds	r7, #224	@ 0xe0
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40004800 	.word	0x40004800
 8000cfc:	58024400 	.word	0x58024400
 8000d00:	58020c00 	.word	0x58020c00

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <NMI_Handler+0x4>

08000d0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5a:	f000 f917 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d68:	4b32      	ldr	r3, [pc, #200]	@ (8000e34 <SystemInit+0xd0>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d6e:	4a31      	ldr	r2, [pc, #196]	@ (8000e34 <SystemInit+0xd0>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d78:	4b2f      	ldr	r3, [pc, #188]	@ (8000e38 <SystemInit+0xd4>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 030f 	and.w	r3, r3, #15
 8000d80:	2b06      	cmp	r3, #6
 8000d82:	d807      	bhi.n	8000d94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d84:	4b2c      	ldr	r3, [pc, #176]	@ (8000e38 <SystemInit+0xd4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f023 030f 	bic.w	r3, r3, #15
 8000d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8000e38 <SystemInit+0xd4>)
 8000d8e:	f043 0307 	orr.w	r3, r3, #7
 8000d92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d94:	4b29      	ldr	r3, [pc, #164]	@ (8000e3c <SystemInit+0xd8>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a28      	ldr	r2, [pc, #160]	@ (8000e3c <SystemInit+0xd8>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000da0:	4b26      	ldr	r3, [pc, #152]	@ (8000e3c <SystemInit+0xd8>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000da6:	4b25      	ldr	r3, [pc, #148]	@ (8000e3c <SystemInit+0xd8>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	4924      	ldr	r1, [pc, #144]	@ (8000e3c <SystemInit+0xd8>)
 8000dac:	4b24      	ldr	r3, [pc, #144]	@ (8000e40 <SystemInit+0xdc>)
 8000dae:	4013      	ands	r3, r2
 8000db0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000db2:	4b21      	ldr	r3, [pc, #132]	@ (8000e38 <SystemInit+0xd4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0308 	and.w	r3, r3, #8
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d007      	beq.n	8000dce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8000e38 <SystemInit+0xd4>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f023 030f 	bic.w	r3, r3, #15
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e38 <SystemInit+0xd4>)
 8000dc8:	f043 0307 	orr.w	r3, r3, #7
 8000dcc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dce:	4b1b      	ldr	r3, [pc, #108]	@ (8000e3c <SystemInit+0xd8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000dd4:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <SystemInit+0xd8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000dda:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <SystemInit+0xd8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000de0:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <SystemInit+0xd8>)
 8000de2:	4a18      	ldr	r2, [pc, #96]	@ (8000e44 <SystemInit+0xe0>)
 8000de4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000de6:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <SystemInit+0xd8>)
 8000de8:	4a17      	ldr	r2, [pc, #92]	@ (8000e48 <SystemInit+0xe4>)
 8000dea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000dec:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <SystemInit+0xd8>)
 8000dee:	4a17      	ldr	r2, [pc, #92]	@ (8000e4c <SystemInit+0xe8>)
 8000df0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000df2:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <SystemInit+0xd8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000df8:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <SystemInit+0xd8>)
 8000dfa:	4a14      	ldr	r2, [pc, #80]	@ (8000e4c <SystemInit+0xe8>)
 8000dfc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <SystemInit+0xd8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e04:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <SystemInit+0xd8>)
 8000e06:	4a11      	ldr	r2, [pc, #68]	@ (8000e4c <SystemInit+0xe8>)
 8000e08:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <SystemInit+0xd8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <SystemInit+0xd8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a09      	ldr	r2, [pc, #36]	@ (8000e3c <SystemInit+0xd8>)
 8000e16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <SystemInit+0xd8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <SystemInit+0xec>)
 8000e24:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e28:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00
 8000e38:	52002000 	.word	0x52002000
 8000e3c:	58024400 	.word	0x58024400
 8000e40:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e44:	02020200 	.word	0x02020200
 8000e48:	01ff0000 	.word	0x01ff0000
 8000e4c:	01010280 	.word	0x01010280
 8000e50:	52004000 	.word	0x52004000

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack     /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e58:	f7ff ff84 	bl	8000d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	@ (8000e94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e82:	f004 ff19 	bl	8005cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fbb9 	bl	80005fc <main>
  bx  lr
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e8c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000e90:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e94:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000e98:	08005d60 	.word	0x08005d60
  ldr r2, =_sbss
 8000e9c:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000ea0:	24000274 	.word	0x24000274

08000ea4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC3_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eae:	2003      	movs	r0, #3
 8000eb0:	f000 f976 	bl	80011a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000eb4:	f001 fd80 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <HAL_Init+0x68>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	0a1b      	lsrs	r3, r3, #8
 8000ec0:	f003 030f 	and.w	r3, r3, #15
 8000ec4:	4913      	ldr	r1, [pc, #76]	@ (8000f14 <HAL_Init+0x6c>)
 8000ec6:	5ccb      	ldrb	r3, [r1, r3]
 8000ec8:	f003 031f 	and.w	r3, r3, #31
 8000ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <HAL_Init+0x68>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	4a0e      	ldr	r2, [pc, #56]	@ (8000f14 <HAL_Init+0x6c>)
 8000edc:	5cd3      	ldrb	r3, [r2, r3]
 8000ede:	f003 031f 	and.w	r3, r3, #31
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee8:	4a0b      	ldr	r2, [pc, #44]	@ (8000f18 <HAL_Init+0x70>)
 8000eea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000eec:	4a0b      	ldr	r2, [pc, #44]	@ (8000f1c <HAL_Init+0x74>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f814 	bl	8000f20 <HAL_InitTick>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e002      	b.n	8000f08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f02:	f7ff fdad 	bl	8000a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	58024400 	.word	0x58024400
 8000f14:	08005d18 	.word	0x08005d18
 8000f18:	24000004 	.word	0x24000004
 8000f1c:	24000000 	.word	0x24000000

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f28:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <HAL_InitTick+0x60>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e021      	b.n	8000f78 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f34:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <HAL_InitTick+0x64>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <HAL_InitTick+0x60>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f94d 	bl	80011ea <HAL_SYSTICK_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00e      	b.n	8000f78 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d80a      	bhi.n	8000f76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f000 f925 	bl	80011b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4a06      	ldr	r2, [pc, #24]	@ (8000f88 <HAL_InitTick+0x68>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	2400000c 	.word	0x2400000c
 8000f84:	24000000 	.word	0x24000000
 8000f88:	24000008 	.word	0x24000008

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	2400000c 	.word	0x2400000c
 8000fb0:	24000270 	.word	0x24000270

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	@ (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	24000270 	.word	0x24000270

08000fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff ffee 	bl	8000fb4 <HAL_GetTick>
 8000fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe4:	d005      	beq.n	8000ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <HAL_Delay+0x44>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff2:	bf00      	nop
 8000ff4:	f7ff ffde 	bl	8000fb4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	429a      	cmp	r2, r3
 8001002:	d8f7      	bhi.n	8000ff4 <HAL_Delay+0x28>
  {
  }
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2400000c 	.word	0x2400000c

08001014 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001024:	4904      	ldr	r1, [pc, #16]	@ (8001038 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4313      	orrs	r3, r2
 800102a:	604b      	str	r3, [r1, #4]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	58000400 	.word	0x58000400

0800103c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800104c:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <__NVIC_SetPriorityGrouping+0x40>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001058:	4013      	ands	r3, r2
 800105a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <__NVIC_SetPriorityGrouping+0x44>)
 8001066:	4313      	orrs	r3, r2
 8001068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106a:	4a04      	ldr	r2, [pc, #16]	@ (800107c <__NVIC_SetPriorityGrouping+0x40>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	60d3      	str	r3, [r2, #12]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00
 8001080:	05fa0000 	.word	0x05fa0000

08001084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001088:	4b04      	ldr	r3, [pc, #16]	@ (800109c <__NVIC_GetPriorityGrouping+0x18>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	f003 0307 	and.w	r3, r3, #7
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db0a      	blt.n	80010ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	490c      	ldr	r1, [pc, #48]	@ (80010ec <__NVIC_SetPriority+0x4c>)
 80010ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c8:	e00a      	b.n	80010e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4908      	ldr	r1, [pc, #32]	@ (80010f0 <__NVIC_SetPriority+0x50>)
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	3b04      	subs	r3, #4
 80010d8:	0112      	lsls	r2, r2, #4
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	440b      	add	r3, r1
 80010de:	761a      	strb	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f1c3 0307 	rsb	r3, r3, #7
 800110e:	2b04      	cmp	r3, #4
 8001110:	bf28      	it	cs
 8001112:	2304      	movcs	r3, #4
 8001114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3304      	adds	r3, #4
 800111a:	2b06      	cmp	r3, #6
 800111c:	d902      	bls.n	8001124 <NVIC_EncodePriority+0x30>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3b03      	subs	r3, #3
 8001122:	e000      	b.n	8001126 <NVIC_EncodePriority+0x32>
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	f04f 32ff 	mov.w	r2, #4294967295
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	401a      	ands	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800113c:	f04f 31ff 	mov.w	r1, #4294967295
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43d9      	mvns	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	4313      	orrs	r3, r2
         );
}
 800114e:	4618      	mov	r0, r3
 8001150:	3724      	adds	r7, #36	@ 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800116c:	d301      	bcc.n	8001172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116e:	2301      	movs	r3, #1
 8001170:	e00f      	b.n	8001192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001172:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <SysTick_Config+0x40>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117a:	210f      	movs	r1, #15
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f7ff ff8e 	bl	80010a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <SysTick_Config+0x40>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118a:	4b04      	ldr	r3, [pc, #16]	@ (800119c <SysTick_Config+0x40>)
 800118c:	2207      	movs	r2, #7
 800118e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	e000e010 	.word	0xe000e010

080011a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff47 	bl	800103c <__NVIC_SetPriorityGrouping>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
 80011c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011c4:	f7ff ff5e 	bl	8001084 <__NVIC_GetPriorityGrouping>
 80011c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	6978      	ldr	r0, [r7, #20]
 80011d0:	f7ff ff90 	bl	80010f4 <NVIC_EncodePriority>
 80011d4:	4602      	mov	r2, r0
 80011d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff5f 	bl	80010a0 <__NVIC_SetPriority>
}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ffb2 	bl	800115c <SysTick_Config>
 80011f8:	4603      	mov	r3, r0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e0e3      	b.n	80013de <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800121c:	2b00      	cmp	r3, #0
 800121e:	d106      	bne.n	800122e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2223      	movs	r2, #35	@ 0x23
 8001224:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff fc33 	bl	8000a94 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	4b6e      	ldr	r3, [pc, #440]	@ (80013e8 <HAL_ETH_Init+0x1e4>)
 8001230:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001234:	4a6c      	ldr	r2, [pc, #432]	@ (80013e8 <HAL_ETH_Init+0x1e4>)
 8001236:	f043 0302 	orr.w	r3, r3, #2
 800123a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800123e:	4b6a      	ldr	r3, [pc, #424]	@ (80013e8 <HAL_ETH_Init+0x1e4>)
 8001240:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7a1b      	ldrb	r3, [r3, #8]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d103      	bne.n	800125c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff fedd 	bl	8001014 <HAL_SYSCFG_ETHInterfaceSelect>
 800125a:	e003      	b.n	8001264 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800125c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001260:	f7ff fed8 	bl	8001014 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001264:	4b61      	ldr	r3, [pc, #388]	@ (80013ec <HAL_ETH_Init+0x1e8>)
 8001266:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800127e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001280:	f7ff fe98 	bl	8000fb4 <HAL_GetTick>
 8001284:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001286:	e011      	b.n	80012ac <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001288:	f7ff fe94 	bl	8000fb4 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001296:	d909      	bls.n	80012ac <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2204      	movs	r2, #4
 800129c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	22e0      	movs	r2, #224	@ 0xe0
 80012a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e098      	b.n	80013de <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1e4      	bne.n	8001288 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f89e 	bl	8001400 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80012c4:	f001 fcf2 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a49      	ldr	r2, [pc, #292]	@ (80013f0 <HAL_ETH_Init+0x1ec>)
 80012cc:	fba2 2303 	umull	r2, r3, r2, r3
 80012d0:	0c9a      	lsrs	r2, r3, #18
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3a01      	subs	r2, #1
 80012d8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fa81 	bl	80017e4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80012ee:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80012fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012fe:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d009      	beq.n	8001322 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	22e0      	movs	r2, #224	@ 0xe0
 800131a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e05d      	b.n	80013de <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800132a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800132e:	4b31      	ldr	r3, [pc, #196]	@ (80013f4 <HAL_ETH_Init+0x1f0>)
 8001330:	4013      	ands	r3, r2
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	6952      	ldr	r2, [r2, #20]
 8001336:	0051      	lsls	r1, r2, #1
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	430b      	orrs	r3, r1
 800133e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001342:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 fae9 	bl	800191e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 fb2f 	bl	80019b0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	3305      	adds	r3, #5
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	021a      	lsls	r2, r3, #8
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	3304      	adds	r3, #4
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	3303      	adds	r3, #3
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	061a      	lsls	r2, r3, #24
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	3302      	adds	r3, #2
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	041b      	lsls	r3, r3, #16
 8001384:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	3301      	adds	r3, #1
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001390:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800139e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013a0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <HAL_ETH_Init+0x1f4>)
 80013b2:	430b      	orrs	r3, r1
 80013b4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <HAL_ETH_Init+0x1f8>)
 80013c6:	430b      	orrs	r3, r1
 80013c8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2210      	movs	r2, #16
 80013d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	58024400 	.word	0x58024400
 80013ec:	58000400 	.word	0x58000400
 80013f0:	431bde83 	.word	0x431bde83
 80013f4:	ffff8001 	.word	0xffff8001
 80013f8:	0c020060 	.word	0x0c020060
 80013fc:	0c20c000 	.word	0x0c20c000

08001400 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001410:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001418:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800141a:	f001 fc47 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 800141e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4a1a      	ldr	r2, [pc, #104]	@ (800148c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d804      	bhi.n	8001432 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	e022      	b.n	8001478 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	4a16      	ldr	r2, [pc, #88]	@ (8001490 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d204      	bcs.n	8001444 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	e019      	b.n	8001478 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4a13      	ldr	r2, [pc, #76]	@ (8001494 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d915      	bls.n	8001478 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4a12      	ldr	r2, [pc, #72]	@ (8001498 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d804      	bhi.n	800145e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	e00c      	b.n	8001478 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	4a0e      	ldr	r2, [pc, #56]	@ (800149c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d804      	bhi.n	8001470 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	e003      	b.n	8001478 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001476:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	02160ebf 	.word	0x02160ebf
 8001490:	03938700 	.word	0x03938700
 8001494:	05f5e0ff 	.word	0x05f5e0ff
 8001498:	08f0d17f 	.word	0x08f0d17f
 800149c:	0ee6b27f 	.word	0x0ee6b27f

080014a0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80014b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	791b      	ldrb	r3, [r3, #4]
 80014b8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80014ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	7b1b      	ldrb	r3, [r3, #12]
 80014c0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80014c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	7b5b      	ldrb	r3, [r3, #13]
 80014c8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80014ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	7b9b      	ldrb	r3, [r3, #14]
 80014d0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80014d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	7bdb      	ldrb	r3, [r3, #15]
 80014d8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80014da:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	7c12      	ldrb	r2, [r2, #16]
 80014e0:	2a00      	cmp	r2, #0
 80014e2:	d102      	bne.n	80014ea <ETH_SetMACConfig+0x4a>
 80014e4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80014e8:	e000      	b.n	80014ec <ETH_SetMACConfig+0x4c>
 80014ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80014ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	7c52      	ldrb	r2, [r2, #17]
 80014f2:	2a00      	cmp	r2, #0
 80014f4:	d102      	bne.n	80014fc <ETH_SetMACConfig+0x5c>
 80014f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014fa:	e000      	b.n	80014fe <ETH_SetMACConfig+0x5e>
 80014fc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80014fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	7c9b      	ldrb	r3, [r3, #18]
 8001504:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001506:	431a      	orrs	r2, r3
               macconf->Speed |
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800150c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001512:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	7f1b      	ldrb	r3, [r3, #28]
 8001518:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800151a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	7f5b      	ldrb	r3, [r3, #29]
 8001520:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001522:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	7f92      	ldrb	r2, [r2, #30]
 8001528:	2a00      	cmp	r2, #0
 800152a:	d102      	bne.n	8001532 <ETH_SetMACConfig+0x92>
 800152c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001530:	e000      	b.n	8001534 <ETH_SetMACConfig+0x94>
 8001532:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001534:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	7fdb      	ldrb	r3, [r3, #31]
 800153a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800153c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001544:	2a00      	cmp	r2, #0
 8001546:	d102      	bne.n	800154e <ETH_SetMACConfig+0xae>
 8001548:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800154c:	e000      	b.n	8001550 <ETH_SetMACConfig+0xb0>
 800154e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001550:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001556:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800155e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001560:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001566:	4313      	orrs	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b56      	ldr	r3, [pc, #344]	@ (80016cc <ETH_SetMACConfig+0x22c>)
 8001572:	4013      	ands	r3, r2
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	68f9      	ldr	r1, [r7, #12]
 800157a:	430b      	orrs	r3, r1
 800157c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001582:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800158a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800158c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001594:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001596:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800159e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80015a0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80015a8:	2a00      	cmp	r2, #0
 80015aa:	d102      	bne.n	80015b2 <ETH_SetMACConfig+0x112>
 80015ac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015b0:	e000      	b.n	80015b4 <ETH_SetMACConfig+0x114>
 80015b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80015b4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80015ba:	4313      	orrs	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	4b42      	ldr	r3, [pc, #264]	@ (80016d0 <ETH_SetMACConfig+0x230>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	68f9      	ldr	r1, [r7, #12]
 80015ce:	430b      	orrs	r3, r1
 80015d0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015d8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80015de:	4313      	orrs	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	4b3a      	ldr	r3, [pc, #232]	@ (80016d4 <ETH_SetMACConfig+0x234>)
 80015ea:	4013      	ands	r3, r2
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6812      	ldr	r2, [r2, #0]
 80015f0:	68f9      	ldr	r1, [r7, #12]
 80015f2:	430b      	orrs	r3, r1
 80015f4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80015fc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001602:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800160a:	2a00      	cmp	r2, #0
 800160c:	d101      	bne.n	8001612 <ETH_SetMACConfig+0x172>
 800160e:	2280      	movs	r2, #128	@ 0x80
 8001610:	e000      	b.n	8001614 <ETH_SetMACConfig+0x174>
 8001612:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001614:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800161a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800161c:	4313      	orrs	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001626:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800162a:	4013      	ands	r3, r2
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	68f9      	ldr	r1, [r7, #12]
 8001632:	430b      	orrs	r3, r1
 8001634:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800163c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001644:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001646:	4313      	orrs	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001652:	f023 0103 	bic.w	r1, r3, #3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	430a      	orrs	r2, r1
 800165e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800166a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001686:	2a00      	cmp	r2, #0
 8001688:	d101      	bne.n	800168e <ETH_SetMACConfig+0x1ee>
 800168a:	2240      	movs	r2, #64	@ 0x40
 800168c:	e000      	b.n	8001690 <ETH_SetMACConfig+0x1f0>
 800168e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001690:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001698:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800169a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80016a2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80016a4:	4313      	orrs	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80016b0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	00048083 	.word	0x00048083
 80016d0:	c0f88000 	.word	0xc0f88000
 80016d4:	fffffef0 	.word	0xfffffef0

080016d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b38      	ldr	r3, [pc, #224]	@ (80017d0 <ETH_SetDMAConfig+0xf8>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	6811      	ldr	r1, [r2, #0]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	430b      	orrs	r3, r1
 80016fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016fe:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	791b      	ldrb	r3, [r3, #4]
 8001704:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800170a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	7b1b      	ldrb	r3, [r3, #12]
 8001710:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001712:	4313      	orrs	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	4b2c      	ldr	r3, [pc, #176]	@ (80017d4 <ETH_SetDMAConfig+0xfc>)
 8001722:	4013      	ands	r3, r2
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	68f9      	ldr	r1, [r7, #12]
 800172a:	430b      	orrs	r3, r1
 800172c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001730:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	7b5b      	ldrb	r3, [r3, #13]
 8001736:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800173c:	4313      	orrs	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001748:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800174c:	4b22      	ldr	r3, [pc, #136]	@ (80017d8 <ETH_SetDMAConfig+0x100>)
 800174e:	4013      	ands	r3, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	68f9      	ldr	r1, [r7, #12]
 8001756:	430b      	orrs	r3, r1
 8001758:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800175c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	7d1b      	ldrb	r3, [r3, #20]
 8001768:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800176a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	7f5b      	ldrb	r3, [r3, #29]
 8001770:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001772:	4313      	orrs	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800177e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001782:	4b16      	ldr	r3, [pc, #88]	@ (80017dc <ETH_SetDMAConfig+0x104>)
 8001784:	4013      	ands	r3, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	68f9      	ldr	r1, [r7, #12]
 800178c:	430b      	orrs	r3, r1
 800178e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001792:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	7f1b      	ldrb	r3, [r3, #28]
 800179a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ac:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80017b0:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <ETH_SetDMAConfig+0x108>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	68f9      	ldr	r1, [r7, #12]
 80017ba:	430b      	orrs	r3, r1
 80017bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017c0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	ffff87fd 	.word	0xffff87fd
 80017d4:	ffff2ffe 	.word	0xffff2ffe
 80017d8:	fffec000 	.word	0xfffec000
 80017dc:	ffc0efef 	.word	0xffc0efef
 80017e0:	7fc0ffff 	.word	0x7fc0ffff

080017e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b0a4      	sub	sp, #144	@ 0x90
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80017ec:	2301      	movs	r3, #1
 80017ee:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017f2:	2300      	movs	r3, #0
 80017f4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001802:	2301      	movs	r3, #1
 8001804:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001808:	2301      	movs	r3, #1
 800180a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800180e:	2301      	movs	r3, #1
 8001810:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800181a:	2301      	movs	r3, #1
 800181c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001820:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001824:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800182c:	2300      	movs	r3, #0
 800182e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800183c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001840:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001848:	2300      	movs	r3, #0
 800184a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800184c:	2301      	movs	r3, #1
 800184e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800185e:	2300      	movs	r3, #0
 8001860:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001862:	2300      	movs	r3, #0
 8001864:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001866:	2300      	movs	r3, #0
 8001868:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001876:	2301      	movs	r3, #1
 8001878:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800187c:	2320      	movs	r3, #32
 800187e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001882:	2301      	movs	r3, #1
 8001884:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800188e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001894:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001898:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80018a0:	2302      	movs	r3, #2
 80018a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80018b8:	2301      	movs	r3, #1
 80018ba:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80018be:	2300      	movs	r3, #0
 80018c0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80018c2:	2301      	movs	r3, #1
 80018c4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80018c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018cc:	4619      	mov	r1, r3
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff fde6 	bl	80014a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80018d4:	2301      	movs	r3, #1
 80018d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80018d8:	2301      	movs	r3, #1
 80018da:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80018ee:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80018f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80018f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80018fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001904:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001908:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	4619      	mov	r1, r3
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff fee1 	bl	80016d8 <ETH_SetDMAConfig>
}
 8001916:	bf00      	nop
 8001918:	3790      	adds	r7, #144	@ 0x90
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800191e:	b480      	push	{r7}
 8001920:	b085      	sub	sp, #20
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	e01d      	b.n	8001968 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68d9      	ldr	r1, [r3, #12]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	440b      	add	r3, r1
 800193c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2200      	movs	r2, #0
 8001948:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001956:	68b9      	ldr	r1, [r7, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	3206      	adds	r2, #6
 800195e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	3301      	adds	r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2b03      	cmp	r3, #3
 800196c:	d9de      	bls.n	800192c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800197c:	461a      	mov	r2, r3
 800197e:	2303      	movs	r3, #3
 8001980:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001990:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019a0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e023      	b.n	8001a06 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6919      	ldr	r1, [r3, #16]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2200      	movs	r2, #0
 80019da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	2200      	movs	r2, #0
 80019f2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	3212      	adds	r2, #18
 80019fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3301      	adds	r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d9d8      	bls.n	80019be <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a32:	461a      	mov	r2, r3
 8001a34:	2303      	movs	r3, #3
 8001a36:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691a      	ldr	r2, [r3, #16]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a46:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a5a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	@ 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a7a:	4b86      	ldr	r3, [pc, #536]	@ (8001c94 <HAL_GPIO_Init+0x228>)
 8001a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a7e:	e18c      	b.n	8001d9a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2101      	movs	r1, #1
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 817e 	beq.w	8001d94 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d005      	beq.n	8001ab0 <HAL_GPIO_Init+0x44>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d130      	bne.n	8001b12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	f003 0201 	and.w	r2, r3, #1
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d017      	beq.n	8001b4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	2203      	movs	r2, #3
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d123      	bne.n	8001ba2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	08da      	lsrs	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3208      	adds	r2, #8
 8001b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	220f      	movs	r2, #15
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	08da      	lsrs	r2, r3, #3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3208      	adds	r2, #8
 8001b9c:	69b9      	ldr	r1, [r7, #24]
 8001b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	2203      	movs	r2, #3
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0203 	and.w	r2, r3, #3
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80d8 	beq.w	8001d94 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be4:	4b2c      	ldr	r3, [pc, #176]	@ (8001c98 <HAL_GPIO_Init+0x22c>)
 8001be6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bea:	4a2b      	ldr	r2, [pc, #172]	@ (8001c98 <HAL_GPIO_Init+0x22c>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001bf4:	4b28      	ldr	r3, [pc, #160]	@ (8001c98 <HAL_GPIO_Init+0x22c>)
 8001bf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c02:	4a26      	ldr	r2, [pc, #152]	@ (8001c9c <HAL_GPIO_Init+0x230>)
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	3302      	adds	r3, #2
 8001c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	220f      	movs	r2, #15
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca0 <HAL_GPIO_Init+0x234>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d04a      	beq.n	8001cc4 <HAL_GPIO_Init+0x258>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca4 <HAL_GPIO_Init+0x238>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d02b      	beq.n	8001c8e <HAL_GPIO_Init+0x222>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a1b      	ldr	r2, [pc, #108]	@ (8001ca8 <HAL_GPIO_Init+0x23c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d025      	beq.n	8001c8a <HAL_GPIO_Init+0x21e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a1a      	ldr	r2, [pc, #104]	@ (8001cac <HAL_GPIO_Init+0x240>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d01f      	beq.n	8001c86 <HAL_GPIO_Init+0x21a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a19      	ldr	r2, [pc, #100]	@ (8001cb0 <HAL_GPIO_Init+0x244>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d019      	beq.n	8001c82 <HAL_GPIO_Init+0x216>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a18      	ldr	r2, [pc, #96]	@ (8001cb4 <HAL_GPIO_Init+0x248>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <HAL_GPIO_Init+0x212>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a17      	ldr	r2, [pc, #92]	@ (8001cb8 <HAL_GPIO_Init+0x24c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00d      	beq.n	8001c7a <HAL_GPIO_Init+0x20e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a16      	ldr	r2, [pc, #88]	@ (8001cbc <HAL_GPIO_Init+0x250>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d007      	beq.n	8001c76 <HAL_GPIO_Init+0x20a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a15      	ldr	r2, [pc, #84]	@ (8001cc0 <HAL_GPIO_Init+0x254>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d101      	bne.n	8001c72 <HAL_GPIO_Init+0x206>
 8001c6e:	2309      	movs	r3, #9
 8001c70:	e029      	b.n	8001cc6 <HAL_GPIO_Init+0x25a>
 8001c72:	230a      	movs	r3, #10
 8001c74:	e027      	b.n	8001cc6 <HAL_GPIO_Init+0x25a>
 8001c76:	2307      	movs	r3, #7
 8001c78:	e025      	b.n	8001cc6 <HAL_GPIO_Init+0x25a>
 8001c7a:	2306      	movs	r3, #6
 8001c7c:	e023      	b.n	8001cc6 <HAL_GPIO_Init+0x25a>
 8001c7e:	2305      	movs	r3, #5
 8001c80:	e021      	b.n	8001cc6 <HAL_GPIO_Init+0x25a>
 8001c82:	2304      	movs	r3, #4
 8001c84:	e01f      	b.n	8001cc6 <HAL_GPIO_Init+0x25a>
 8001c86:	2303      	movs	r3, #3
 8001c88:	e01d      	b.n	8001cc6 <HAL_GPIO_Init+0x25a>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e01b      	b.n	8001cc6 <HAL_GPIO_Init+0x25a>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e019      	b.n	8001cc6 <HAL_GPIO_Init+0x25a>
 8001c92:	bf00      	nop
 8001c94:	58000080 	.word	0x58000080
 8001c98:	58024400 	.word	0x58024400
 8001c9c:	58000400 	.word	0x58000400
 8001ca0:	58020000 	.word	0x58020000
 8001ca4:	58020400 	.word	0x58020400
 8001ca8:	58020800 	.word	0x58020800
 8001cac:	58020c00 	.word	0x58020c00
 8001cb0:	58021000 	.word	0x58021000
 8001cb4:	58021400 	.word	0x58021400
 8001cb8:	58021800 	.word	0x58021800
 8001cbc:	58021c00 	.word	0x58021c00
 8001cc0:	58022400 	.word	0x58022400
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	f002 0203 	and.w	r2, r2, #3
 8001ccc:	0092      	lsls	r2, r2, #2
 8001cce:	4093      	lsls	r3, r2
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd6:	4938      	ldr	r1, [pc, #224]	@ (8001db8 <HAL_GPIO_Init+0x34c>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	3301      	adds	r3, #1
 8001d98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f47f ae6b 	bne.w	8001a80 <HAL_GPIO_Init+0x14>
  }
}
 8001daa:	bf00      	nop
 8001dac:	bf00      	nop
 8001dae:	3724      	adds	r7, #36	@ 0x24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	58000400 	.word	0x58000400

08001dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dcc:	787b      	ldrb	r3, [r7, #1]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001dd8:	e003      	b.n	8001de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	041a      	lsls	r2, r3, #16
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	619a      	str	r2, [r3, #24]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e00:	887a      	ldrh	r2, [r7, #2]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	041a      	lsls	r2, r3, #16
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	887b      	ldrh	r3, [r7, #2]
 8001e0e:	400b      	ands	r3, r1
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	619a      	str	r2, [r3, #24]
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001e2c:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <HAL_PWREx_ConfigSupply+0x70>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d00a      	beq.n	8001e4e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001e38:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <HAL_PWREx_ConfigSupply+0x70>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d001      	beq.n	8001e4a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e01f      	b.n	8001e8a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e01d      	b.n	8001e8a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001e4e:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <HAL_PWREx_ConfigSupply+0x70>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f023 0207 	bic.w	r2, r3, #7
 8001e56:	490f      	ldr	r1, [pc, #60]	@ (8001e94 <HAL_PWREx_ConfigSupply+0x70>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e5e:	f7ff f8a9 	bl	8000fb4 <HAL_GetTick>
 8001e62:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e64:	e009      	b.n	8001e7a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e66:	f7ff f8a5 	bl	8000fb4 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e74:	d901      	bls.n	8001e7a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e007      	b.n	8001e8a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e7a:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <HAL_PWREx_ConfigSupply+0x70>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e86:	d1ee      	bne.n	8001e66 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	58024800 	.word	0x58024800

08001e98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08c      	sub	sp, #48	@ 0x30
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e3c8      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 8087 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eb8:	4b88      	ldr	r3, [pc, #544]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ec2:	4b86      	ldr	r3, [pc, #536]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eca:	2b10      	cmp	r3, #16
 8001ecc:	d007      	beq.n	8001ede <HAL_RCC_OscConfig+0x46>
 8001ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed0:	2b18      	cmp	r3, #24
 8001ed2:	d110      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x5e>
 8001ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d10b      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ede:	4b7f      	ldr	r3, [pc, #508]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d06c      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x12c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d168      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e3a2      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001efe:	d106      	bne.n	8001f0e <HAL_RCC_OscConfig+0x76>
 8001f00:	4b76      	ldr	r3, [pc, #472]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a75      	ldr	r2, [pc, #468]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001f06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	e02e      	b.n	8001f6c <HAL_RCC_OscConfig+0xd4>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x98>
 8001f16:	4b71      	ldr	r3, [pc, #452]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a70      	ldr	r2, [pc, #448]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001f1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b6e      	ldr	r3, [pc, #440]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a6d      	ldr	r2, [pc, #436]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001f28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e01d      	b.n	8001f6c <HAL_RCC_OscConfig+0xd4>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0xbc>
 8001f3a:	4b68      	ldr	r3, [pc, #416]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a67      	ldr	r2, [pc, #412]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001f40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	4b65      	ldr	r3, [pc, #404]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a64      	ldr	r2, [pc, #400]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e00b      	b.n	8001f6c <HAL_RCC_OscConfig+0xd4>
 8001f54:	4b61      	ldr	r3, [pc, #388]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a60      	ldr	r2, [pc, #384]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	4b5e      	ldr	r3, [pc, #376]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a5d      	ldr	r2, [pc, #372]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d013      	beq.n	8001f9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7ff f81e 	bl	8000fb4 <HAL_GetTick>
 8001f78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7ff f81a 	bl	8000fb4 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	@ 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e356      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f8e:	4b53      	ldr	r3, [pc, #332]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0xe4>
 8001f9a:	e014      	b.n	8001fc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff f80a 	bl	8000fb4 <HAL_GetTick>
 8001fa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7ff f806 	bl	8000fb4 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	@ 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e342      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fb6:	4b49      	ldr	r3, [pc, #292]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x10c>
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 808c 	beq.w	80020ec <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fd4:	4b41      	ldr	r3, [pc, #260]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fdc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fde:	4b3f      	ldr	r3, [pc, #252]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <HAL_RCC_OscConfig+0x162>
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	2b18      	cmp	r3, #24
 8001fee:	d137      	bne.n	8002060 <HAL_RCC_OscConfig+0x1c8>
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d132      	bne.n	8002060 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ffa:	4b38      	ldr	r3, [pc, #224]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_RCC_OscConfig+0x17a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e314      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002012:	4b32      	ldr	r3, [pc, #200]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 0219 	bic.w	r2, r3, #25
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	492f      	ldr	r1, [pc, #188]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002024:	f7fe ffc6 	bl	8000fb4 <HAL_GetTick>
 8002028:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800202c:	f7fe ffc2 	bl	8000fb4 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e2fe      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800203e:	4b27      	ldr	r3, [pc, #156]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204a:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	061b      	lsls	r3, r3, #24
 8002058:	4920      	ldr	r1, [pc, #128]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800205e:	e045      	b.n	80020ec <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d026      	beq.n	80020b6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002068:	4b1c      	ldr	r3, [pc, #112]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f023 0219 	bic.w	r2, r3, #25
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4919      	ldr	r1, [pc, #100]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207a:	f7fe ff9b 	bl	8000fb4 <HAL_GetTick>
 800207e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002082:	f7fe ff97 	bl	8000fb4 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e2d3      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002094:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a0:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	061b      	lsls	r3, r3, #24
 80020ae:	490b      	ldr	r1, [pc, #44]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]
 80020b4:	e01a      	b.n	80020ec <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b6:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a08      	ldr	r2, [pc, #32]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7fe ff77 	bl	8000fb4 <HAL_GetTick>
 80020c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020c8:	e00a      	b.n	80020e0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ca:	f7fe ff73 	bl	8000fb4 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d903      	bls.n	80020e0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e2af      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
 80020dc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020e0:	4b96      	ldr	r3, [pc, #600]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1ee      	bne.n	80020ca <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d06a      	beq.n	80021ce <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f8:	4b90      	ldr	r3, [pc, #576]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002100:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002102:	4b8e      	ldr	r3, [pc, #568]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 8002104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002106:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2b08      	cmp	r3, #8
 800210c:	d007      	beq.n	800211e <HAL_RCC_OscConfig+0x286>
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	2b18      	cmp	r3, #24
 8002112:	d11b      	bne.n	800214c <HAL_RCC_OscConfig+0x2b4>
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d116      	bne.n	800214c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800211e:	4b87      	ldr	r3, [pc, #540]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_RCC_OscConfig+0x29e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	2b80      	cmp	r3, #128	@ 0x80
 8002130:	d001      	beq.n	8002136 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e282      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002136:	4b81      	ldr	r3, [pc, #516]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	061b      	lsls	r3, r3, #24
 8002144:	497d      	ldr	r1, [pc, #500]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800214a:	e040      	b.n	80021ce <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d023      	beq.n	800219c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002154:	4b79      	ldr	r3, [pc, #484]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a78      	ldr	r2, [pc, #480]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 800215a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800215e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7fe ff28 	bl	8000fb4 <HAL_GetTick>
 8002164:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002168:	f7fe ff24 	bl	8000fb4 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e260      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800217a:	4b70      	ldr	r3, [pc, #448]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002186:	4b6d      	ldr	r3, [pc, #436]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	061b      	lsls	r3, r3, #24
 8002194:	4969      	ldr	r1, [pc, #420]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	60cb      	str	r3, [r1, #12]
 800219a:	e018      	b.n	80021ce <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800219c:	4b67      	ldr	r3, [pc, #412]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a66      	ldr	r2, [pc, #408]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 80021a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe ff04 	bl	8000fb4 <HAL_GetTick>
 80021ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80021b0:	f7fe ff00 	bl	8000fb4 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e23c      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80021c2:	4b5e      	ldr	r3, [pc, #376]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d036      	beq.n	8002248 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d019      	beq.n	8002216 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e2:	4b56      	ldr	r3, [pc, #344]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 80021e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021e6:	4a55      	ldr	r2, [pc, #340]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ee:	f7fe fee1 	bl	8000fb4 <HAL_GetTick>
 80021f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f6:	f7fe fedd 	bl	8000fb4 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e219      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002208:	4b4c      	ldr	r3, [pc, #304]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 800220a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x35e>
 8002214:	e018      	b.n	8002248 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002216:	4b49      	ldr	r3, [pc, #292]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 8002218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800221a:	4a48      	ldr	r2, [pc, #288]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002222:	f7fe fec7 	bl	8000fb4 <HAL_GetTick>
 8002226:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222a:	f7fe fec3 	bl	8000fb4 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e1ff      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800223c:	4b3f      	ldr	r3, [pc, #252]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 800223e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f0      	bne.n	800222a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0320 	and.w	r3, r3, #32
 8002250:	2b00      	cmp	r3, #0
 8002252:	d036      	beq.n	80022c2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d019      	beq.n	8002290 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800225c:	4b37      	ldr	r3, [pc, #220]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a36      	ldr	r2, [pc, #216]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 8002262:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002266:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002268:	f7fe fea4 	bl	8000fb4 <HAL_GetTick>
 800226c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002270:	f7fe fea0 	bl	8000fb4 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e1dc      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002282:	4b2e      	ldr	r3, [pc, #184]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x3d8>
 800228e:	e018      	b.n	80022c2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002290:	4b2a      	ldr	r3, [pc, #168]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a29      	ldr	r2, [pc, #164]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 8002296:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800229a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800229c:	f7fe fe8a 	bl	8000fb4 <HAL_GetTick>
 80022a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022a4:	f7fe fe86 	bl	8000fb4 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e1c2      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022b6:	4b21      	ldr	r3, [pc, #132]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 8086 	beq.w	80023dc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80022d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <HAL_RCC_OscConfig+0x4a8>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002340 <HAL_RCC_OscConfig+0x4a8>)
 80022d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022dc:	f7fe fe6a 	bl	8000fb4 <HAL_GetTick>
 80022e0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e4:	f7fe fe66 	bl	8000fb4 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	@ 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e1a2      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022f6:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <HAL_RCC_OscConfig+0x4a8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d106      	bne.n	8002318 <HAL_RCC_OscConfig+0x480>
 800230a:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230e:	4a0b      	ldr	r2, [pc, #44]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6713      	str	r3, [r2, #112]	@ 0x70
 8002316:	e032      	b.n	800237e <HAL_RCC_OscConfig+0x4e6>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d111      	bne.n	8002344 <HAL_RCC_OscConfig+0x4ac>
 8002320:	4b06      	ldr	r3, [pc, #24]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002324:	4a05      	ldr	r2, [pc, #20]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	6713      	str	r3, [r2, #112]	@ 0x70
 800232c:	4b03      	ldr	r3, [pc, #12]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002330:	4a02      	ldr	r2, [pc, #8]	@ (800233c <HAL_RCC_OscConfig+0x4a4>)
 8002332:	f023 0304 	bic.w	r3, r3, #4
 8002336:	6713      	str	r3, [r2, #112]	@ 0x70
 8002338:	e021      	b.n	800237e <HAL_RCC_OscConfig+0x4e6>
 800233a:	bf00      	nop
 800233c:	58024400 	.word	0x58024400
 8002340:	58024800 	.word	0x58024800
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b05      	cmp	r3, #5
 800234a:	d10c      	bne.n	8002366 <HAL_RCC_OscConfig+0x4ce>
 800234c:	4b83      	ldr	r3, [pc, #524]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 800234e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002350:	4a82      	ldr	r2, [pc, #520]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	6713      	str	r3, [r2, #112]	@ 0x70
 8002358:	4b80      	ldr	r3, [pc, #512]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 800235a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235c:	4a7f      	ldr	r2, [pc, #508]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6713      	str	r3, [r2, #112]	@ 0x70
 8002364:	e00b      	b.n	800237e <HAL_RCC_OscConfig+0x4e6>
 8002366:	4b7d      	ldr	r3, [pc, #500]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 8002368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800236a:	4a7c      	ldr	r2, [pc, #496]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	6713      	str	r3, [r2, #112]	@ 0x70
 8002372:	4b7a      	ldr	r3, [pc, #488]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002376:	4a79      	ldr	r2, [pc, #484]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 8002378:	f023 0304 	bic.w	r3, r3, #4
 800237c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d015      	beq.n	80023b2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002386:	f7fe fe15 	bl	8000fb4 <HAL_GetTick>
 800238a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800238c:	e00a      	b.n	80023a4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7fe fe11 	bl	8000fb4 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800239c:	4293      	cmp	r3, r2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e14b      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023a4:	4b6d      	ldr	r3, [pc, #436]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 80023a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0ee      	beq.n	800238e <HAL_RCC_OscConfig+0x4f6>
 80023b0:	e014      	b.n	80023dc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b2:	f7fe fdff 	bl	8000fb4 <HAL_GetTick>
 80023b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7fe fdfb 	bl	8000fb4 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e135      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023d0:	4b62      	ldr	r3, [pc, #392]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1ee      	bne.n	80023ba <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 812a 	beq.w	800263a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80023e6:	4b5d      	ldr	r3, [pc, #372]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023ee:	2b18      	cmp	r3, #24
 80023f0:	f000 80ba 	beq.w	8002568 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	f040 8095 	bne.w	8002528 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	4b57      	ldr	r3, [pc, #348]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a56      	ldr	r2, [pc, #344]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 8002404:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240a:	f7fe fdd3 	bl	8000fb4 <HAL_GetTick>
 800240e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002412:	f7fe fdcf 	bl	8000fb4 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e10b      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002424:	4b4d      	ldr	r3, [pc, #308]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f0      	bne.n	8002412 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002430:	4b4a      	ldr	r3, [pc, #296]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 8002432:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002434:	4b4a      	ldr	r3, [pc, #296]	@ (8002560 <HAL_RCC_OscConfig+0x6c8>)
 8002436:	4013      	ands	r3, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002440:	0112      	lsls	r2, r2, #4
 8002442:	430a      	orrs	r2, r1
 8002444:	4945      	ldr	r1, [pc, #276]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 8002446:	4313      	orrs	r3, r2
 8002448:	628b      	str	r3, [r1, #40]	@ 0x28
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	3b01      	subs	r3, #1
 8002450:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002458:	3b01      	subs	r3, #1
 800245a:	025b      	lsls	r3, r3, #9
 800245c:	b29b      	uxth	r3, r3
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002464:	3b01      	subs	r3, #1
 8002466:	041b      	lsls	r3, r3, #16
 8002468:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002472:	3b01      	subs	r3, #1
 8002474:	061b      	lsls	r3, r3, #24
 8002476:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800247a:	4938      	ldr	r1, [pc, #224]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 800247c:	4313      	orrs	r3, r2
 800247e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002480:	4b36      	ldr	r3, [pc, #216]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 8002482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002484:	4a35      	ldr	r2, [pc, #212]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800248c:	4b33      	ldr	r3, [pc, #204]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 800248e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002490:	4b34      	ldr	r3, [pc, #208]	@ (8002564 <HAL_RCC_OscConfig+0x6cc>)
 8002492:	4013      	ands	r3, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002498:	00d2      	lsls	r2, r2, #3
 800249a:	4930      	ldr	r1, [pc, #192]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 800249c:	4313      	orrs	r3, r2
 800249e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80024a0:	4b2e      	ldr	r3, [pc, #184]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 80024a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a4:	f023 020c 	bic.w	r2, r3, #12
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	492b      	ldr	r1, [pc, #172]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80024b2:	4b2a      	ldr	r3, [pc, #168]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 80024b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b6:	f023 0202 	bic.w	r2, r3, #2
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024be:	4927      	ldr	r1, [pc, #156]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80024c4:	4b25      	ldr	r3, [pc, #148]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 80024c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c8:	4a24      	ldr	r2, [pc, #144]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 80024ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024d0:	4b22      	ldr	r3, [pc, #136]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 80024d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d4:	4a21      	ldr	r2, [pc, #132]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 80024d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80024dc:	4b1f      	ldr	r3, [pc, #124]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 80024de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e0:	4a1e      	ldr	r2, [pc, #120]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 80024e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80024e8:	4b1c      	ldr	r3, [pc, #112]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 80024ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ec:	4a1b      	ldr	r2, [pc, #108]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f4:	4b19      	ldr	r3, [pc, #100]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a18      	ldr	r2, [pc, #96]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 80024fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7fe fd58 	bl	8000fb4 <HAL_GetTick>
 8002504:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7fe fd54 	bl	8000fb4 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e090      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800251a:	4b10      	ldr	r3, [pc, #64]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0x670>
 8002526:	e088      	b.n	800263a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0b      	ldr	r2, [pc, #44]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 800252e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe fd3e 	bl	8000fb4 <HAL_GetTick>
 8002538:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253c:	f7fe fd3a 	bl	8000fb4 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e076      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800254e:	4b03      	ldr	r3, [pc, #12]	@ (800255c <HAL_RCC_OscConfig+0x6c4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x6a4>
 800255a:	e06e      	b.n	800263a <HAL_RCC_OscConfig+0x7a2>
 800255c:	58024400 	.word	0x58024400
 8002560:	fffffc0c 	.word	0xfffffc0c
 8002564:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002568:	4b36      	ldr	r3, [pc, #216]	@ (8002644 <HAL_RCC_OscConfig+0x7ac>)
 800256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800256e:	4b35      	ldr	r3, [pc, #212]	@ (8002644 <HAL_RCC_OscConfig+0x7ac>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	2b01      	cmp	r3, #1
 800257a:	d031      	beq.n	80025e0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	f003 0203 	and.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002586:	429a      	cmp	r2, r3
 8002588:	d12a      	bne.n	80025e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002596:	429a      	cmp	r2, r3
 8002598:	d122      	bne.n	80025e0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d11a      	bne.n	80025e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	0a5b      	lsrs	r3, r3, #9
 80025ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d111      	bne.n	80025e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	0c1b      	lsrs	r3, r3, #16
 80025c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d108      	bne.n	80025e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	0e1b      	lsrs	r3, r3, #24
 80025d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e02b      	b.n	800263c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80025e4:	4b17      	ldr	r3, [pc, #92]	@ (8002644 <HAL_RCC_OscConfig+0x7ac>)
 80025e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e8:	08db      	lsrs	r3, r3, #3
 80025ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d01f      	beq.n	800263a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80025fa:	4b12      	ldr	r3, [pc, #72]	@ (8002644 <HAL_RCC_OscConfig+0x7ac>)
 80025fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fe:	4a11      	ldr	r2, [pc, #68]	@ (8002644 <HAL_RCC_OscConfig+0x7ac>)
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002606:	f7fe fcd5 	bl	8000fb4 <HAL_GetTick>
 800260a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800260c:	bf00      	nop
 800260e:	f7fe fcd1 	bl	8000fb4 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	4293      	cmp	r3, r2
 8002618:	d0f9      	beq.n	800260e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800261a:	4b0a      	ldr	r3, [pc, #40]	@ (8002644 <HAL_RCC_OscConfig+0x7ac>)
 800261c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800261e:	4b0a      	ldr	r3, [pc, #40]	@ (8002648 <HAL_RCC_OscConfig+0x7b0>)
 8002620:	4013      	ands	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002626:	00d2      	lsls	r2, r2, #3
 8002628:	4906      	ldr	r1, [pc, #24]	@ (8002644 <HAL_RCC_OscConfig+0x7ac>)
 800262a:	4313      	orrs	r3, r2
 800262c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800262e:	4b05      	ldr	r3, [pc, #20]	@ (8002644 <HAL_RCC_OscConfig+0x7ac>)
 8002630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002632:	4a04      	ldr	r2, [pc, #16]	@ (8002644 <HAL_RCC_OscConfig+0x7ac>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3730      	adds	r7, #48	@ 0x30
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	58024400 	.word	0x58024400
 8002648:	ffff0007 	.word	0xffff0007

0800264c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e19c      	b.n	800299a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002660:	4b8a      	ldr	r3, [pc, #552]	@ (800288c <HAL_RCC_ClockConfig+0x240>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d910      	bls.n	8002690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b87      	ldr	r3, [pc, #540]	@ (800288c <HAL_RCC_ClockConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 020f 	bic.w	r2, r3, #15
 8002676:	4985      	ldr	r1, [pc, #532]	@ (800288c <HAL_RCC_ClockConfig+0x240>)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b83      	ldr	r3, [pc, #524]	@ (800288c <HAL_RCC_ClockConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e184      	b.n	800299a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d010      	beq.n	80026be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	4b7b      	ldr	r3, [pc, #492]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d908      	bls.n	80026be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026ac:	4b78      	ldr	r3, [pc, #480]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	4975      	ldr	r1, [pc, #468]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d010      	beq.n	80026ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	4b70      	ldr	r3, [pc, #448]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d908      	bls.n	80026ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026da:	4b6d      	ldr	r3, [pc, #436]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	496a      	ldr	r1, [pc, #424]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d010      	beq.n	800271a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699a      	ldr	r2, [r3, #24]
 80026fc:	4b64      	ldr	r3, [pc, #400]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002704:	429a      	cmp	r2, r3
 8002706:	d908      	bls.n	800271a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002708:	4b61      	ldr	r3, [pc, #388]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	495e      	ldr	r1, [pc, #376]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 8002716:	4313      	orrs	r3, r2
 8002718:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	d010      	beq.n	8002748 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69da      	ldr	r2, [r3, #28]
 800272a:	4b59      	ldr	r3, [pc, #356]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002732:	429a      	cmp	r2, r3
 8002734:	d908      	bls.n	8002748 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002736:	4b56      	ldr	r3, [pc, #344]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	4953      	ldr	r1, [pc, #332]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 8002744:	4313      	orrs	r3, r2
 8002746:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d010      	beq.n	8002776 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	4b4d      	ldr	r3, [pc, #308]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	429a      	cmp	r2, r3
 8002762:	d908      	bls.n	8002776 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002764:	4b4a      	ldr	r3, [pc, #296]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f023 020f 	bic.w	r2, r3, #15
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4947      	ldr	r1, [pc, #284]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 8002772:	4313      	orrs	r3, r2
 8002774:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d055      	beq.n	800282e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002782:	4b43      	ldr	r3, [pc, #268]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	4940      	ldr	r1, [pc, #256]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 8002790:	4313      	orrs	r3, r2
 8002792:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d107      	bne.n	80027ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800279c:	4b3c      	ldr	r3, [pc, #240]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d121      	bne.n	80027ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0f6      	b.n	800299a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d107      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027b4:	4b36      	ldr	r3, [pc, #216]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d115      	bne.n	80027ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0ea      	b.n	800299a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d107      	bne.n	80027dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027cc:	4b30      	ldr	r3, [pc, #192]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d109      	bne.n	80027ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0de      	b.n	800299a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0d6      	b.n	800299a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027ec:	4b28      	ldr	r3, [pc, #160]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	f023 0207 	bic.w	r2, r3, #7
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4925      	ldr	r1, [pc, #148]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027fe:	f7fe fbd9 	bl	8000fb4 <HAL_GetTick>
 8002802:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002804:	e00a      	b.n	800281c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002806:	f7fe fbd5 	bl	8000fb4 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e0be      	b.n	800299a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281c:	4b1c      	ldr	r3, [pc, #112]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	429a      	cmp	r2, r3
 800282c:	d1eb      	bne.n	8002806 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d010      	beq.n	800285c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	4b14      	ldr	r3, [pc, #80]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	429a      	cmp	r2, r3
 8002848:	d208      	bcs.n	800285c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800284a:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f023 020f 	bic.w	r2, r3, #15
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	490e      	ldr	r1, [pc, #56]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 8002858:	4313      	orrs	r3, r2
 800285a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800285c:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <HAL_RCC_ClockConfig+0x240>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d214      	bcs.n	8002894 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286a:	4b08      	ldr	r3, [pc, #32]	@ (800288c <HAL_RCC_ClockConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 020f 	bic.w	r2, r3, #15
 8002872:	4906      	ldr	r1, [pc, #24]	@ (800288c <HAL_RCC_ClockConfig+0x240>)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287a:	4b04      	ldr	r3, [pc, #16]	@ (800288c <HAL_RCC_ClockConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d005      	beq.n	8002894 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e086      	b.n	800299a <HAL_RCC_ClockConfig+0x34e>
 800288c:	52002000 	.word	0x52002000
 8002890:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d010      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	4b3f      	ldr	r3, [pc, #252]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d208      	bcs.n	80028c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028b0:	4b3c      	ldr	r3, [pc, #240]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	4939      	ldr	r1, [pc, #228]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d010      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	4b34      	ldr	r3, [pc, #208]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028da:	429a      	cmp	r2, r3
 80028dc:	d208      	bcs.n	80028f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028de:	4b31      	ldr	r3, [pc, #196]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	492e      	ldr	r1, [pc, #184]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d010      	beq.n	800291e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699a      	ldr	r2, [r3, #24]
 8002900:	4b28      	ldr	r3, [pc, #160]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002908:	429a      	cmp	r2, r3
 800290a:	d208      	bcs.n	800291e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800290c:	4b25      	ldr	r3, [pc, #148]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	4922      	ldr	r1, [pc, #136]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 800291a:	4313      	orrs	r3, r2
 800291c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d010      	beq.n	800294c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	4b1d      	ldr	r3, [pc, #116]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002936:	429a      	cmp	r2, r3
 8002938:	d208      	bcs.n	800294c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800293a:	4b1a      	ldr	r3, [pc, #104]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	4917      	ldr	r1, [pc, #92]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 8002948:	4313      	orrs	r3, r2
 800294a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800294c:	f000 f834 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8002950:	4602      	mov	r2, r0
 8002952:	4b14      	ldr	r3, [pc, #80]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	4912      	ldr	r1, [pc, #72]	@ (80029a8 <HAL_RCC_ClockConfig+0x35c>)
 800295e:	5ccb      	ldrb	r3, [r1, r3]
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
 8002968:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800296a:	4b0e      	ldr	r3, [pc, #56]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	4a0d      	ldr	r2, [pc, #52]	@ (80029a8 <HAL_RCC_ClockConfig+0x35c>)
 8002974:	5cd3      	ldrb	r3, [r2, r3]
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
 8002980:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <HAL_RCC_ClockConfig+0x360>)
 8002982:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002984:	4a0a      	ldr	r2, [pc, #40]	@ (80029b0 <HAL_RCC_ClockConfig+0x364>)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800298a:	4b0a      	ldr	r3, [pc, #40]	@ (80029b4 <HAL_RCC_ClockConfig+0x368>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fac6 	bl	8000f20 <HAL_InitTick>
 8002994:	4603      	mov	r3, r0
 8002996:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002998:	7bfb      	ldrb	r3, [r7, #15]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	58024400 	.word	0x58024400
 80029a8:	08005d18 	.word	0x08005d18
 80029ac:	24000004 	.word	0x24000004
 80029b0:	24000000 	.word	0x24000000
 80029b4:	24000008 	.word	0x24000008

080029b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	@ 0x24
 80029bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029be:	4bb3      	ldr	r3, [pc, #716]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029c6:	2b18      	cmp	r3, #24
 80029c8:	f200 8155 	bhi.w	8002c76 <HAL_RCC_GetSysClockFreq+0x2be>
 80029cc:	a201      	add	r2, pc, #4	@ (adr r2, 80029d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80029ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d2:	bf00      	nop
 80029d4:	08002a39 	.word	0x08002a39
 80029d8:	08002c77 	.word	0x08002c77
 80029dc:	08002c77 	.word	0x08002c77
 80029e0:	08002c77 	.word	0x08002c77
 80029e4:	08002c77 	.word	0x08002c77
 80029e8:	08002c77 	.word	0x08002c77
 80029ec:	08002c77 	.word	0x08002c77
 80029f0:	08002c77 	.word	0x08002c77
 80029f4:	08002a5f 	.word	0x08002a5f
 80029f8:	08002c77 	.word	0x08002c77
 80029fc:	08002c77 	.word	0x08002c77
 8002a00:	08002c77 	.word	0x08002c77
 8002a04:	08002c77 	.word	0x08002c77
 8002a08:	08002c77 	.word	0x08002c77
 8002a0c:	08002c77 	.word	0x08002c77
 8002a10:	08002c77 	.word	0x08002c77
 8002a14:	08002a65 	.word	0x08002a65
 8002a18:	08002c77 	.word	0x08002c77
 8002a1c:	08002c77 	.word	0x08002c77
 8002a20:	08002c77 	.word	0x08002c77
 8002a24:	08002c77 	.word	0x08002c77
 8002a28:	08002c77 	.word	0x08002c77
 8002a2c:	08002c77 	.word	0x08002c77
 8002a30:	08002c77 	.word	0x08002c77
 8002a34:	08002a6b 	.word	0x08002a6b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a38:	4b94      	ldr	r3, [pc, #592]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d009      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a44:	4b91      	ldr	r3, [pc, #580]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	08db      	lsrs	r3, r3, #3
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	4a90      	ldr	r2, [pc, #576]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
 8002a54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002a56:	e111      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a58:	4b8d      	ldr	r3, [pc, #564]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a5a:	61bb      	str	r3, [r7, #24]
      break;
 8002a5c:	e10e      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002a5e:	4b8d      	ldr	r3, [pc, #564]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a60:	61bb      	str	r3, [r7, #24]
      break;
 8002a62:	e10b      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002a64:	4b8c      	ldr	r3, [pc, #560]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a66:	61bb      	str	r3, [r7, #24]
      break;
 8002a68:	e108      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a6a:	4b88      	ldr	r3, [pc, #544]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002a74:	4b85      	ldr	r3, [pc, #532]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a7e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a80:	4b82      	ldr	r3, [pc, #520]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a8a:	4b80      	ldr	r3, [pc, #512]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8e:	08db      	lsrs	r3, r3, #3
 8002a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	ee07 3a90 	vmov	s15, r3
 8002a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80e1 	beq.w	8002c70 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	f000 8083 	beq.w	8002bbc <HAL_RCC_GetSysClockFreq+0x204>
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	f200 80a1 	bhi.w	8002c00 <HAL_RCC_GetSysClockFreq+0x248>
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_RCC_GetSysClockFreq+0x114>
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d056      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002aca:	e099      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002acc:	4b6f      	ldr	r3, [pc, #444]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d02d      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ad8:	4b6c      	ldr	r3, [pc, #432]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	08db      	lsrs	r3, r3, #3
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	4a6b      	ldr	r2, [pc, #428]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	ee07 3a90 	vmov	s15, r3
 8002af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b02:	4b62      	ldr	r3, [pc, #392]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b16:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002b32:	e087      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	ee07 3a90 	vmov	s15, r3
 8002b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b3e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002ca0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b46:	4b51      	ldr	r3, [pc, #324]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b5a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b76:	e065      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	ee07 3a90 	vmov	s15, r3
 8002b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b82:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002ca4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b8a:	4b40      	ldr	r3, [pc, #256]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b92:	ee07 3a90 	vmov	s15, r3
 8002b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b9e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bba:	e043      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	ee07 3a90 	vmov	s15, r3
 8002bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002ca8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bce:	4b2f      	ldr	r3, [pc, #188]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd6:	ee07 3a90 	vmov	s15, r3
 8002bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8002be2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bfe:	e021      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	ee07 3a90 	vmov	s15, r3
 8002c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c0a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002ca4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c12:	4b1e      	ldr	r3, [pc, #120]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c1a:	ee07 3a90 	vmov	s15, r3
 8002c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c26:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c42:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002c44:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c48:	0a5b      	lsrs	r3, r3, #9
 8002c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c4e:	3301      	adds	r3, #1
 8002c50:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	ee07 3a90 	vmov	s15, r3
 8002c58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c68:	ee17 3a90 	vmov	r3, s15
 8002c6c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002c6e:	e005      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61bb      	str	r3, [r7, #24]
      break;
 8002c74:	e002      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002c76:	4b07      	ldr	r3, [pc, #28]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c78:	61bb      	str	r3, [r7, #24]
      break;
 8002c7a:	bf00      	nop
  }

  return sysclockfreq;
 8002c7c:	69bb      	ldr	r3, [r7, #24]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3724      	adds	r7, #36	@ 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	58024400 	.word	0x58024400
 8002c90:	03d09000 	.word	0x03d09000
 8002c94:	003d0900 	.word	0x003d0900
 8002c98:	007a1200 	.word	0x007a1200
 8002c9c:	46000000 	.word	0x46000000
 8002ca0:	4c742400 	.word	0x4c742400
 8002ca4:	4a742400 	.word	0x4a742400
 8002ca8:	4af42400 	.word	0x4af42400

08002cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002cb2:	f7ff fe81 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	4b10      	ldr	r3, [pc, #64]	@ (8002cfc <HAL_RCC_GetHCLKFreq+0x50>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	490f      	ldr	r1, [pc, #60]	@ (8002d00 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cc4:	5ccb      	ldrb	r3, [r1, r3]
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	fa22 f303 	lsr.w	r3, r2, r3
 8002cce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cfc <HAL_RCC_GetHCLKFreq+0x50>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	4a09      	ldr	r2, [pc, #36]	@ (8002d00 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce6:	4a07      	ldr	r2, [pc, #28]	@ (8002d04 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ce8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cea:	4a07      	ldr	r2, [pc, #28]	@ (8002d08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002cf0:	4b04      	ldr	r3, [pc, #16]	@ (8002d04 <HAL_RCC_GetHCLKFreq+0x58>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	58024400 	.word	0x58024400
 8002d00:	08005d18 	.word	0x08005d18
 8002d04:	24000004 	.word	0x24000004
 8002d08:	24000000 	.word	0x24000000

08002d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002d10:	f7ff ffcc 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002d14:	4602      	mov	r2, r0
 8002d16:	4b06      	ldr	r3, [pc, #24]	@ (8002d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	4904      	ldr	r1, [pc, #16]	@ (8002d34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d22:	5ccb      	ldrb	r3, [r1, r3]
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	58024400 	.word	0x58024400
 8002d34:	08005d18 	.word	0x08005d18

08002d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002d3c:	f7ff ffb6 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b06      	ldr	r3, [pc, #24]	@ (8002d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	0a1b      	lsrs	r3, r3, #8
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	4904      	ldr	r1, [pc, #16]	@ (8002d60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	58024400 	.word	0x58024400
 8002d60:	08005d18 	.word	0x08005d18

08002d64 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d68:	b0c6      	sub	sp, #280	@ 0x118
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d70:	2300      	movs	r3, #0
 8002d72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d76:	2300      	movs	r3, #0
 8002d78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d84:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002d88:	2500      	movs	r5, #0
 8002d8a:	ea54 0305 	orrs.w	r3, r4, r5
 8002d8e:	d049      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002d9a:	d02f      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002d9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002da0:	d828      	bhi.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002da2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002da6:	d01a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002da8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dac:	d822      	bhi.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002db2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002db6:	d007      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002db8:	e01c      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dba:	4bab      	ldr	r3, [pc, #684]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dbe:	4aaa      	ldr	r2, [pc, #680]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002dc6:	e01a      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002dcc:	3308      	adds	r3, #8
 8002dce:	2102      	movs	r1, #2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f001 fc25 	bl	8004620 <RCCEx_PLL2_Config>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ddc:	e00f      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002de2:	3328      	adds	r3, #40	@ 0x28
 8002de4:	2102      	movs	r1, #2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f001 fccc 	bl	8004784 <RCCEx_PLL3_Config>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002df2:	e004      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002dfa:	e000      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10a      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002e06:	4b98      	ldr	r3, [pc, #608]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e14:	4a94      	ldr	r2, [pc, #592]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e16:	430b      	orrs	r3, r1
 8002e18:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e1a:	e003      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002e20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002e30:	f04f 0900 	mov.w	r9, #0
 8002e34:	ea58 0309 	orrs.w	r3, r8, r9
 8002e38:	d047      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d82a      	bhi.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002e44:	a201      	add	r2, pc, #4	@ (adr r2, 8002e4c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4a:	bf00      	nop
 8002e4c:	08002e61 	.word	0x08002e61
 8002e50:	08002e6f 	.word	0x08002e6f
 8002e54:	08002e85 	.word	0x08002e85
 8002e58:	08002ea3 	.word	0x08002ea3
 8002e5c:	08002ea3 	.word	0x08002ea3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e60:	4b81      	ldr	r3, [pc, #516]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e64:	4a80      	ldr	r2, [pc, #512]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e6c:	e01a      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e72:	3308      	adds	r3, #8
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f001 fbd2 	bl	8004620 <RCCEx_PLL2_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e82:	e00f      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e88:	3328      	adds	r3, #40	@ 0x28
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f001 fc79 	bl	8004784 <RCCEx_PLL3_Config>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e98:	e004      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002ea0:	e000      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002ea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ea4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10a      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eac:	4b6e      	ldr	r3, [pc, #440]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb0:	f023 0107 	bic.w	r1, r3, #7
 8002eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eba:	4a6b      	ldr	r2, [pc, #428]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ec0:	e003      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002ec6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8002ed6:	f04f 0b00 	mov.w	fp, #0
 8002eda:	ea5a 030b 	orrs.w	r3, sl, fp
 8002ede:	d05b      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ee4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ee8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002eec:	d03b      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002eee:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002ef2:	d834      	bhi.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002ef4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ef8:	d037      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002efa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002efe:	d82e      	bhi.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002f00:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002f04:	d033      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002f06:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002f0a:	d828      	bhi.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002f0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f10:	d01a      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002f12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f16:	d822      	bhi.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002f1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f20:	d007      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002f22:	e01c      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f24:	4b50      	ldr	r3, [pc, #320]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f28:	4a4f      	ldr	r2, [pc, #316]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f30:	e01e      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f36:	3308      	adds	r3, #8
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f001 fb70 	bl	8004620 <RCCEx_PLL2_Config>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f46:	e013      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f4c:	3328      	adds	r3, #40	@ 0x28
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f001 fc17 	bl	8004784 <RCCEx_PLL3_Config>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f5c:	e008      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002f64:	e004      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002f66:	bf00      	nop
 8002f68:	e002      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002f6a:	bf00      	nop
 8002f6c:	e000      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10b      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002f78:	4b3b      	ldr	r3, [pc, #236]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002f88:	4a37      	ldr	r2, [pc, #220]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f8e:	e003      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002fa4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002fae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	d05d      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fbc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002fc0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002fc4:	d03b      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002fc6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002fca:	d834      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002fcc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fd0:	d037      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002fd2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fd6:	d82e      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002fd8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fdc:	d033      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8002fde:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fe2:	d828      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002fe4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fe8:	d01a      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002fea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fee:	d822      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002ff4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ff8:	d007      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002ffa:	e01c      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003000:	4a19      	ldr	r2, [pc, #100]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003006:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003008:	e01e      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800300a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800300e:	3308      	adds	r3, #8
 8003010:	2100      	movs	r1, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f001 fb04 	bl	8004620 <RCCEx_PLL2_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800301e:	e013      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003024:	3328      	adds	r3, #40	@ 0x28
 8003026:	2100      	movs	r1, #0
 8003028:	4618      	mov	r0, r3
 800302a:	f001 fbab 	bl	8004784 <RCCEx_PLL3_Config>
 800302e:	4603      	mov	r3, r0
 8003030:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003034:	e008      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800303c:	e004      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800303e:	bf00      	nop
 8003040:	e002      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003042:	bf00      	nop
 8003044:	e000      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003046:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003048:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10d      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003050:	4b05      	ldr	r3, [pc, #20]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003054:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800305c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003060:	4a01      	ldr	r2, [pc, #4]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003062:	430b      	orrs	r3, r1
 8003064:	6593      	str	r3, [r2, #88]	@ 0x58
 8003066:	e005      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003068:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003070:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003080:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003084:	2300      	movs	r3, #0
 8003086:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800308a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800308e:	460b      	mov	r3, r1
 8003090:	4313      	orrs	r3, r2
 8003092:	d03a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800309a:	2b30      	cmp	r3, #48	@ 0x30
 800309c:	d01f      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800309e:	2b30      	cmp	r3, #48	@ 0x30
 80030a0:	d819      	bhi.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	d00c      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	d815      	bhi.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d019      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80030ae:	2b10      	cmp	r3, #16
 80030b0:	d111      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030b2:	4baa      	ldr	r3, [pc, #680]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b6:	4aa9      	ldr	r2, [pc, #676]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80030be:	e011      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030c4:	3308      	adds	r3, #8
 80030c6:	2102      	movs	r1, #2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f001 faa9 	bl	8004620 <RCCEx_PLL2_Config>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80030d4:	e006      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80030dc:	e002      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80030de:	bf00      	nop
 80030e0:	e000      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80030e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10a      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80030ec:	4b9b      	ldr	r3, [pc, #620]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80030f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fa:	4a98      	ldr	r2, [pc, #608]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80030fc:	430b      	orrs	r3, r1
 80030fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003100:	e003      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003102:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003106:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800310a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003116:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800311a:	2300      	movs	r3, #0
 800311c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003120:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003124:	460b      	mov	r3, r1
 8003126:	4313      	orrs	r3, r2
 8003128:	d051      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800312a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800312e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003130:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003134:	d035      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003136:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800313a:	d82e      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800313c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003140:	d031      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003142:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003146:	d828      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003148:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800314c:	d01a      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800314e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003152:	d822      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800315c:	d007      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800315e:	e01c      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003160:	4b7e      	ldr	r3, [pc, #504]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	4a7d      	ldr	r2, [pc, #500]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800316a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800316c:	e01c      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800316e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003172:	3308      	adds	r3, #8
 8003174:	2100      	movs	r1, #0
 8003176:	4618      	mov	r0, r3
 8003178:	f001 fa52 	bl	8004620 <RCCEx_PLL2_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003182:	e011      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003188:	3328      	adds	r3, #40	@ 0x28
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f001 faf9 	bl	8004784 <RCCEx_PLL3_Config>
 8003192:	4603      	mov	r3, r0
 8003194:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003198:	e006      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80031a0:	e002      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80031a2:	bf00      	nop
 80031a4:	e000      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80031a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80031b0:	4b6a      	ldr	r3, [pc, #424]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80031b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031be:	4a67      	ldr	r2, [pc, #412]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80031c4:	e003      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80031ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80031da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031de:	2300      	movs	r3, #0
 80031e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80031e4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4313      	orrs	r3, r2
 80031ec:	d053      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80031ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031f8:	d033      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80031fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031fe:	d82c      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003200:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003204:	d02f      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003206:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800320a:	d826      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800320c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003210:	d02b      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003212:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003216:	d820      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003218:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800321c:	d012      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800321e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003222:	d81a      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d022      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800322c:	d115      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800322e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003232:	3308      	adds	r3, #8
 8003234:	2101      	movs	r1, #1
 8003236:	4618      	mov	r0, r3
 8003238:	f001 f9f2 	bl	8004620 <RCCEx_PLL2_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003242:	e015      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003248:	3328      	adds	r3, #40	@ 0x28
 800324a:	2101      	movs	r1, #1
 800324c:	4618      	mov	r0, r3
 800324e:	f001 fa99 	bl	8004784 <RCCEx_PLL3_Config>
 8003252:	4603      	mov	r3, r0
 8003254:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003258:	e00a      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003260:	e006      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003262:	bf00      	nop
 8003264:	e004      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003266:	bf00      	nop
 8003268:	e002      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800326a:	bf00      	nop
 800326c:	e000      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800326e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003270:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10a      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003278:	4b38      	ldr	r3, [pc, #224]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800327a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800327c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003286:	4a35      	ldr	r2, [pc, #212]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003288:	430b      	orrs	r3, r1
 800328a:	6513      	str	r3, [r2, #80]	@ 0x50
 800328c:	e003      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003292:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80032a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032a6:	2300      	movs	r3, #0
 80032a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80032ac:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032b0:	460b      	mov	r3, r1
 80032b2:	4313      	orrs	r3, r2
 80032b4:	d058      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80032b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80032be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032c2:	d033      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80032c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032c8:	d82c      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80032ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ce:	d02f      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d4:	d826      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80032d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80032da:	d02b      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80032dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80032e0:	d820      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80032e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032e6:	d012      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80032e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032ec:	d81a      	bhi.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d022      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80032f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032f6:	d115      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032fc:	3308      	adds	r3, #8
 80032fe:	2101      	movs	r1, #1
 8003300:	4618      	mov	r0, r3
 8003302:	f001 f98d 	bl	8004620 <RCCEx_PLL2_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800330c:	e015      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800330e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003312:	3328      	adds	r3, #40	@ 0x28
 8003314:	2101      	movs	r1, #1
 8003316:	4618      	mov	r0, r3
 8003318:	f001 fa34 	bl	8004784 <RCCEx_PLL3_Config>
 800331c:	4603      	mov	r3, r0
 800331e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003322:	e00a      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800332a:	e006      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800332c:	bf00      	nop
 800332e:	e004      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003330:	bf00      	nop
 8003332:	e002      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003334:	bf00      	nop
 8003336:	e000      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800333a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10e      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003342:	4b06      	ldr	r3, [pc, #24]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003346:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800334a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800334e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003352:	4a02      	ldr	r2, [pc, #8]	@ (800335c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003354:	430b      	orrs	r3, r1
 8003356:	6593      	str	r3, [r2, #88]	@ 0x58
 8003358:	e006      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800335a:	bf00      	nop
 800335c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003360:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003364:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003370:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003374:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003378:	2300      	movs	r3, #0
 800337a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800337e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003382:	460b      	mov	r3, r1
 8003384:	4313      	orrs	r3, r2
 8003386:	d037      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800338c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800338e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003392:	d00e      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003398:	d816      	bhi.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d018      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800339e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033a2:	d111      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a4:	4bc4      	ldr	r3, [pc, #784]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a8:	4ac3      	ldr	r2, [pc, #780]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033b0:	e00f      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033b6:	3308      	adds	r3, #8
 80033b8:	2101      	movs	r1, #1
 80033ba:	4618      	mov	r0, r3
 80033bc:	f001 f930 	bl	8004620 <RCCEx_PLL2_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033c6:	e004      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033ce:	e000      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80033d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10a      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033da:	4bb7      	ldr	r3, [pc, #732]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033de:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80033e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033e8:	4ab3      	ldr	r2, [pc, #716]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033ea:	430b      	orrs	r3, r1
 80033ec:	6513      	str	r3, [r2, #80]	@ 0x50
 80033ee:	e003      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80033f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003400:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003404:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003408:	2300      	movs	r3, #0
 800340a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800340e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003412:	460b      	mov	r3, r1
 8003414:	4313      	orrs	r3, r2
 8003416:	d039      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800341c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800341e:	2b03      	cmp	r3, #3
 8003420:	d81c      	bhi.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003422:	a201      	add	r2, pc, #4	@ (adr r2, 8003428 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003428:	08003465 	.word	0x08003465
 800342c:	08003439 	.word	0x08003439
 8003430:	08003447 	.word	0x08003447
 8003434:	08003465 	.word	0x08003465
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003438:	4b9f      	ldr	r3, [pc, #636]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800343a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343c:	4a9e      	ldr	r2, [pc, #632]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800343e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003442:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003444:	e00f      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800344a:	3308      	adds	r3, #8
 800344c:	2102      	movs	r1, #2
 800344e:	4618      	mov	r0, r3
 8003450:	f001 f8e6 	bl	8004620 <RCCEx_PLL2_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800345a:	e004      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003462:	e000      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003466:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10a      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800346e:	4b92      	ldr	r3, [pc, #584]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003472:	f023 0103 	bic.w	r1, r3, #3
 8003476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800347a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800347c:	4a8e      	ldr	r2, [pc, #568]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800347e:	430b      	orrs	r3, r1
 8003480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003482:	e003      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003484:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003488:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800348c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003498:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800349c:	2300      	movs	r3, #0
 800349e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f000 8099 	beq.w	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034ae:	4b83      	ldr	r3, [pc, #524]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a82      	ldr	r2, [pc, #520]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80034b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034ba:	f7fd fd7b 	bl	8000fb4 <HAL_GetTick>
 80034be:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034c2:	e00b      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c4:	f7fd fd76 	bl	8000fb4 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b64      	cmp	r3, #100	@ 0x64
 80034d2:	d903      	bls.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034da:	e005      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034dc:	4b77      	ldr	r3, [pc, #476]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0ed      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80034e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d173      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80034f0:	4b71      	ldr	r3, [pc, #452]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80034f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80034fc:	4053      	eors	r3, r2
 80034fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003502:	2b00      	cmp	r3, #0
 8003504:	d015      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003506:	4b6c      	ldr	r3, [pc, #432]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800350e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003512:	4b69      	ldr	r3, [pc, #420]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003516:	4a68      	ldr	r2, [pc, #416]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800351c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800351e:	4b66      	ldr	r3, [pc, #408]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003522:	4a65      	ldr	r2, [pc, #404]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003524:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003528:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800352a:	4a63      	ldr	r2, [pc, #396]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800352c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003530:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003536:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800353a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800353e:	d118      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fd fd38 	bl	8000fb4 <HAL_GetTick>
 8003544:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003548:	e00d      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fd fd33 	bl	8000fb4 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003554:	1ad2      	subs	r2, r2, r3
 8003556:	f241 3388 	movw	r3, #5000	@ 0x1388
 800355a:	429a      	cmp	r2, r3
 800355c:	d903      	bls.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003564:	e005      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003566:	4b54      	ldr	r3, [pc, #336]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0eb      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003572:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003576:	2b00      	cmp	r3, #0
 8003578:	d129      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800357a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800357e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003582:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003586:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800358a:	d10e      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x846>
 800358c:	4b4a      	ldr	r3, [pc, #296]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003598:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800359c:	091a      	lsrs	r2, r3, #4
 800359e:	4b48      	ldr	r3, [pc, #288]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	4a45      	ldr	r2, [pc, #276]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6113      	str	r3, [r2, #16]
 80035a8:	e005      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80035aa:	4b43      	ldr	r3, [pc, #268]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	4a42      	ldr	r2, [pc, #264]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80035b4:	6113      	str	r3, [r2, #16]
 80035b6:	4b40      	ldr	r3, [pc, #256]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035b8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80035ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80035c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c6:	4a3c      	ldr	r2, [pc, #240]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035c8:	430b      	orrs	r3, r1
 80035ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80035cc:	e008      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80035d6:	e003      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80035e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	f002 0301 	and.w	r3, r2, #1
 80035ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035f0:	2300      	movs	r3, #0
 80035f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80035f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80035fa:	460b      	mov	r3, r1
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f000 808f 	beq.w	8003720 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003606:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003608:	2b28      	cmp	r3, #40	@ 0x28
 800360a:	d871      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800360c:	a201      	add	r2, pc, #4	@ (adr r2, 8003614 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800360e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003612:	bf00      	nop
 8003614:	080036f9 	.word	0x080036f9
 8003618:	080036f1 	.word	0x080036f1
 800361c:	080036f1 	.word	0x080036f1
 8003620:	080036f1 	.word	0x080036f1
 8003624:	080036f1 	.word	0x080036f1
 8003628:	080036f1 	.word	0x080036f1
 800362c:	080036f1 	.word	0x080036f1
 8003630:	080036f1 	.word	0x080036f1
 8003634:	080036c5 	.word	0x080036c5
 8003638:	080036f1 	.word	0x080036f1
 800363c:	080036f1 	.word	0x080036f1
 8003640:	080036f1 	.word	0x080036f1
 8003644:	080036f1 	.word	0x080036f1
 8003648:	080036f1 	.word	0x080036f1
 800364c:	080036f1 	.word	0x080036f1
 8003650:	080036f1 	.word	0x080036f1
 8003654:	080036db 	.word	0x080036db
 8003658:	080036f1 	.word	0x080036f1
 800365c:	080036f1 	.word	0x080036f1
 8003660:	080036f1 	.word	0x080036f1
 8003664:	080036f1 	.word	0x080036f1
 8003668:	080036f1 	.word	0x080036f1
 800366c:	080036f1 	.word	0x080036f1
 8003670:	080036f1 	.word	0x080036f1
 8003674:	080036f9 	.word	0x080036f9
 8003678:	080036f1 	.word	0x080036f1
 800367c:	080036f1 	.word	0x080036f1
 8003680:	080036f1 	.word	0x080036f1
 8003684:	080036f1 	.word	0x080036f1
 8003688:	080036f1 	.word	0x080036f1
 800368c:	080036f1 	.word	0x080036f1
 8003690:	080036f1 	.word	0x080036f1
 8003694:	080036f9 	.word	0x080036f9
 8003698:	080036f1 	.word	0x080036f1
 800369c:	080036f1 	.word	0x080036f1
 80036a0:	080036f1 	.word	0x080036f1
 80036a4:	080036f1 	.word	0x080036f1
 80036a8:	080036f1 	.word	0x080036f1
 80036ac:	080036f1 	.word	0x080036f1
 80036b0:	080036f1 	.word	0x080036f1
 80036b4:	080036f9 	.word	0x080036f9
 80036b8:	58024400 	.word	0x58024400
 80036bc:	58024800 	.word	0x58024800
 80036c0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036c8:	3308      	adds	r3, #8
 80036ca:	2101      	movs	r1, #1
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 ffa7 	bl	8004620 <RCCEx_PLL2_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036d8:	e00f      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036de:	3328      	adds	r3, #40	@ 0x28
 80036e0:	2101      	movs	r1, #1
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 f84e 	bl	8004784 <RCCEx_PLL3_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036ee:	e004      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036f6:	e000      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80036f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10a      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003702:	4bbf      	ldr	r3, [pc, #764]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003706:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800370a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800370e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003710:	4abb      	ldr	r2, [pc, #748]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003712:	430b      	orrs	r3, r1
 8003714:	6553      	str	r3, [r2, #84]	@ 0x54
 8003716:	e003      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003718:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800371c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	f002 0302 	and.w	r3, r2, #2
 800372c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003730:	2300      	movs	r3, #0
 8003732:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003736:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800373a:	460b      	mov	r3, r1
 800373c:	4313      	orrs	r3, r2
 800373e:	d041      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003746:	2b05      	cmp	r3, #5
 8003748:	d824      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800374a:	a201      	add	r2, pc, #4	@ (adr r2, 8003750 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800374c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003750:	0800379d 	.word	0x0800379d
 8003754:	08003769 	.word	0x08003769
 8003758:	0800377f 	.word	0x0800377f
 800375c:	0800379d 	.word	0x0800379d
 8003760:	0800379d 	.word	0x0800379d
 8003764:	0800379d 	.word	0x0800379d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800376c:	3308      	adds	r3, #8
 800376e:	2101      	movs	r1, #1
 8003770:	4618      	mov	r0, r3
 8003772:	f000 ff55 	bl	8004620 <RCCEx_PLL2_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800377c:	e00f      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800377e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003782:	3328      	adds	r3, #40	@ 0x28
 8003784:	2101      	movs	r1, #1
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fffc 	bl	8004784 <RCCEx_PLL3_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003792:	e004      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800379a:	e000      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800379c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800379e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10a      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80037a6:	4b96      	ldr	r3, [pc, #600]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80037a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037aa:	f023 0107 	bic.w	r1, r3, #7
 80037ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b4:	4a92      	ldr	r2, [pc, #584]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80037b6:	430b      	orrs	r3, r1
 80037b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80037ba:	e003      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	f002 0304 	and.w	r3, r2, #4
 80037d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80037d4:	2300      	movs	r3, #0
 80037d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037da:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80037de:	460b      	mov	r3, r1
 80037e0:	4313      	orrs	r3, r2
 80037e2:	d044      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80037e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ec:	2b05      	cmp	r3, #5
 80037ee:	d825      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80037f0:	a201      	add	r2, pc, #4	@ (adr r2, 80037f8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80037f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f6:	bf00      	nop
 80037f8:	08003845 	.word	0x08003845
 80037fc:	08003811 	.word	0x08003811
 8003800:	08003827 	.word	0x08003827
 8003804:	08003845 	.word	0x08003845
 8003808:	08003845 	.word	0x08003845
 800380c:	08003845 	.word	0x08003845
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003814:	3308      	adds	r3, #8
 8003816:	2101      	movs	r1, #1
 8003818:	4618      	mov	r0, r3
 800381a:	f000 ff01 	bl	8004620 <RCCEx_PLL2_Config>
 800381e:	4603      	mov	r3, r0
 8003820:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003824:	e00f      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800382a:	3328      	adds	r3, #40	@ 0x28
 800382c:	2101      	movs	r1, #1
 800382e:	4618      	mov	r0, r3
 8003830:	f000 ffa8 	bl	8004784 <RCCEx_PLL3_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800383a:	e004      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003842:	e000      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003846:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10b      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800384e:	4b6c      	ldr	r3, [pc, #432]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003852:	f023 0107 	bic.w	r1, r3, #7
 8003856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385e:	4a68      	ldr	r2, [pc, #416]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003860:	430b      	orrs	r3, r1
 8003862:	6593      	str	r3, [r2, #88]	@ 0x58
 8003864:	e003      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003866:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800386a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800386e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	f002 0320 	and.w	r3, r2, #32
 800387a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800387e:	2300      	movs	r3, #0
 8003880:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003884:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003888:	460b      	mov	r3, r1
 800388a:	4313      	orrs	r3, r2
 800388c:	d055      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800388e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003896:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800389a:	d033      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800389c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038a0:	d82c      	bhi.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80038a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a6:	d02f      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80038a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ac:	d826      	bhi.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80038ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038b2:	d02b      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80038b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038b8:	d820      	bhi.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80038ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038be:	d012      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80038c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038c4:	d81a      	bhi.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d022      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80038ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038ce:	d115      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038d4:	3308      	adds	r3, #8
 80038d6:	2100      	movs	r1, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fea1 	bl	8004620 <RCCEx_PLL2_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80038e4:	e015      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ea:	3328      	adds	r3, #40	@ 0x28
 80038ec:	2102      	movs	r1, #2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 ff48 	bl	8004784 <RCCEx_PLL3_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80038fa:	e00a      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003902:	e006      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003904:	bf00      	nop
 8003906:	e004      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003908:	bf00      	nop
 800390a:	e002      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800390c:	bf00      	nop
 800390e:	e000      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003912:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10b      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800391a:	4b39      	ldr	r3, [pc, #228]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800391c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003926:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800392a:	4a35      	ldr	r2, [pc, #212]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800392c:	430b      	orrs	r3, r1
 800392e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003930:	e003      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003932:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003936:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800393a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800393e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003942:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003946:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800394a:	2300      	movs	r3, #0
 800394c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003950:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003954:	460b      	mov	r3, r1
 8003956:	4313      	orrs	r3, r2
 8003958:	d058      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800395a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800395e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003962:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003966:	d033      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003968:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800396c:	d82c      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800396e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003972:	d02f      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003978:	d826      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800397a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800397e:	d02b      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003980:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003984:	d820      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003986:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800398a:	d012      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800398c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003990:	d81a      	bhi.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003992:	2b00      	cmp	r3, #0
 8003994:	d022      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800399a:	d115      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800399c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039a0:	3308      	adds	r3, #8
 80039a2:	2100      	movs	r1, #0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fe3b 	bl	8004620 <RCCEx_PLL2_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039b0:	e015      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039b6:	3328      	adds	r3, #40	@ 0x28
 80039b8:	2102      	movs	r1, #2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fee2 	bl	8004784 <RCCEx_PLL3_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039c6:	e00a      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039ce:	e006      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80039d0:	bf00      	nop
 80039d2:	e004      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80039d4:	bf00      	nop
 80039d6:	e002      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80039d8:	bf00      	nop
 80039da:	e000      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80039dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10e      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039e6:	4b06      	ldr	r3, [pc, #24]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80039ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039f6:	4a02      	ldr	r2, [pc, #8]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039f8:	430b      	orrs	r3, r1
 80039fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80039fc:	e006      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80039fe:	bf00      	nop
 8003a00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003a18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a22:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003a26:	460b      	mov	r3, r1
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	d055      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a34:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003a38:	d033      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003a3a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003a3e:	d82c      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003a40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a44:	d02f      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003a46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a4a:	d826      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003a4c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003a50:	d02b      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003a52:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003a56:	d820      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003a58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a5c:	d012      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003a5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a62:	d81a      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d022      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003a68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a6c:	d115      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a72:	3308      	adds	r3, #8
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fdd2 	bl	8004620 <RCCEx_PLL2_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a82:	e015      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a88:	3328      	adds	r3, #40	@ 0x28
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fe79 	bl	8004784 <RCCEx_PLL3_Config>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003aa0:	e006      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003aa2:	bf00      	nop
 8003aa4:	e004      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003aa6:	bf00      	nop
 8003aa8:	e002      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10b      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ab8:	4ba0      	ldr	r3, [pc, #640]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003abc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ac4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ac8:	4a9c      	ldr	r2, [pc, #624]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003aca:	430b      	orrs	r3, r1
 8003acc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ace:	e003      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ad4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae0:	f002 0308 	and.w	r3, r2, #8
 8003ae4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003aee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003af2:	460b      	mov	r3, r1
 8003af4:	4313      	orrs	r3, r2
 8003af6:	d01e      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b0a:	3328      	adds	r3, #40	@ 0x28
 8003b0c:	2102      	movs	r1, #2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fe38 	bl	8004784 <RCCEx_PLL3_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003b20:	4b86      	ldr	r3, [pc, #536]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b24:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b30:	4a82      	ldr	r2, [pc, #520]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b32:	430b      	orrs	r3, r1
 8003b34:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	f002 0310 	and.w	r3, r2, #16
 8003b42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b46:	2300      	movs	r3, #0
 8003b48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b4c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003b50:	460b      	mov	r3, r1
 8003b52:	4313      	orrs	r3, r2
 8003b54:	d01e      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b62:	d10c      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b68:	3328      	adds	r3, #40	@ 0x28
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fe09 	bl	8004784 <RCCEx_PLL3_Config>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b7e:	4b6f      	ldr	r3, [pc, #444]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b82:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b8e:	4a6b      	ldr	r2, [pc, #428]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003b90:	430b      	orrs	r3, r1
 8003b92:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ba0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ba6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003baa:	460b      	mov	r3, r1
 8003bac:	4313      	orrs	r3, r2
 8003bae:	d03e      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003bb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bbc:	d022      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003bbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bc2:	d81b      	bhi.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bcc:	d00b      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003bce:	e015      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fd21 	bl	8004620 <RCCEx_PLL2_Config>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003be4:	e00f      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bea:	3328      	adds	r3, #40	@ 0x28
 8003bec:	2102      	movs	r1, #2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fdc8 	bl	8004784 <RCCEx_PLL3_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003bfa:	e004      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c02:	e000      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10b      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c0e:	4b4b      	ldr	r3, [pc, #300]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c12:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c1e:	4a47      	ldr	r2, [pc, #284]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c20:	430b      	orrs	r3, r1
 8003c22:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c24:	e003      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c2a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c36:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003c3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c40:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003c44:	460b      	mov	r3, r1
 8003c46:	4313      	orrs	r3, r2
 8003c48:	d03b      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c56:	d01f      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003c58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c5c:	d818      	bhi.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003c5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c62:	d003      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003c64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c68:	d007      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003c6a:	e011      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c6c:	4b33      	ldr	r3, [pc, #204]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c70:	4a32      	ldr	r2, [pc, #200]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c78:	e00f      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c7e:	3328      	adds	r3, #40	@ 0x28
 8003c80:	2101      	movs	r1, #1
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fd7e 	bl	8004784 <RCCEx_PLL3_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c8e:	e004      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c96:	e000      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10b      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ca2:	4b26      	ldr	r3, [pc, #152]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cb2:	4a22      	ldr	r2, [pc, #136]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cb8:	e003      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cbe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003cce:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003cd4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	d034      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cec:	d007      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003cee:	e011      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf0:	4b12      	ldr	r3, [pc, #72]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf4:	4a11      	ldr	r2, [pc, #68]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003cfc:	e00e      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d02:	3308      	adds	r3, #8
 8003d04:	2102      	movs	r1, #2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fc8a 	bl	8004620 <RCCEx_PLL2_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d12:	e003      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10d      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d24:	4b05      	ldr	r3, [pc, #20]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d28:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d32:	4a02      	ldr	r2, [pc, #8]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d34:	430b      	orrs	r3, r1
 8003d36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d38:	e006      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003d3a:	bf00      	nop
 8003d3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d50:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003d54:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d56:	2300      	movs	r3, #0
 8003d58:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d5a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4313      	orrs	r3, r2
 8003d62:	d00c      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d68:	3328      	adds	r3, #40	@ 0x28
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fd09 	bl	8004784 <RCCEx_PLL3_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d86:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003d8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d90:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003d94:	460b      	mov	r3, r1
 8003d96:	4313      	orrs	r3, r2
 8003d98:	d036      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003da0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003da4:	d018      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003da6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003daa:	d811      	bhi.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003db0:	d014      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003db2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003db6:	d80b      	bhi.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d011      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dc0:	d106      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc2:	4bb7      	ldr	r3, [pc, #732]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc6:	4ab6      	ldr	r2, [pc, #728]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003dce:	e008      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003dd6:	e004      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003dd8:	bf00      	nop
 8003dda:	e002      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003ddc:	bf00      	nop
 8003dde:	e000      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dea:	4bad      	ldr	r3, [pc, #692]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003df8:	4aa9      	ldr	r2, [pc, #676]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dfe:	e003      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003e14:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e16:	2300      	movs	r3, #0
 8003e18:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e1a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4313      	orrs	r3, r2
 8003e22:	d009      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e24:	4b9e      	ldr	r3, [pc, #632]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e28:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e32:	4a9b      	ldr	r2, [pc, #620]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003e44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e46:	2300      	movs	r3, #0
 8003e48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e4a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4313      	orrs	r3, r2
 8003e52:	d009      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e54:	4b92      	ldr	r3, [pc, #584]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e58:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e62:	4a8f      	ldr	r2, [pc, #572]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e64:	430b      	orrs	r3, r1
 8003e66:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e70:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003e74:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e76:	2300      	movs	r3, #0
 8003e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e7a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4313      	orrs	r3, r2
 8003e82:	d00e      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e84:	4b86      	ldr	r3, [pc, #536]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	4a85      	ldr	r2, [pc, #532]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003e8e:	6113      	str	r3, [r2, #16]
 8003e90:	4b83      	ldr	r3, [pc, #524]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e92:	6919      	ldr	r1, [r3, #16]
 8003e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e9c:	4a80      	ldr	r2, [pc, #512]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eaa:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003eae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eb4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	d009      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003ebe:	4b78      	ldr	r3, [pc, #480]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ecc:	4a74      	ldr	r2, [pc, #464]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003ede:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ee4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4313      	orrs	r3, r2
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003eee:	4b6c      	ldr	r3, [pc, #432]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efe:	4a68      	ldr	r2, [pc, #416]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f00:	430b      	orrs	r3, r1
 8003f02:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f16:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	d011      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f24:	3308      	adds	r3, #8
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fb79 	bl	8004620 <RCCEx_PLL2_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003f34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	6239      	str	r1, [r7, #32]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f56:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	d011      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f64:	3308      	adds	r3, #8
 8003f66:	2101      	movs	r1, #1
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fb59 	bl	8004620 <RCCEx_PLL2_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003f74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	61b9      	str	r1, [r7, #24]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	61fb      	str	r3, [r7, #28]
 8003f96:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	d011      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fb39 	bl	8004620 <RCCEx_PLL2_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8003fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	2100      	movs	r1, #0
 8003fce:	6139      	str	r1, [r7, #16]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	d011      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe4:	3328      	adds	r3, #40	@ 0x28
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fbcb 	bl	8004784 <RCCEx_PLL3_Config>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8003ff4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004000:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400c:	2100      	movs	r1, #0
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800401a:	460b      	mov	r3, r1
 800401c:	4313      	orrs	r3, r2
 800401e:	d011      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004024:	3328      	adds	r3, #40	@ 0x28
 8004026:	2101      	movs	r1, #1
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fbab 	bl	8004784 <RCCEx_PLL3_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004040:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404c:	2100      	movs	r1, #0
 800404e:	6039      	str	r1, [r7, #0]
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	607b      	str	r3, [r7, #4]
 8004056:	e9d7 1200 	ldrd	r1, r2, [r7]
 800405a:	460b      	mov	r3, r1
 800405c:	4313      	orrs	r3, r2
 800405e:	d011      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004064:	3328      	adds	r3, #40	@ 0x28
 8004066:	2102      	movs	r1, #2
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fb8b 	bl	8004784 <RCCEx_PLL3_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004080:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004084:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	e000      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
}
 8004092:	4618      	mov	r0, r3
 8004094:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004098:	46bd      	mov	sp, r7
 800409a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800409e:	bf00      	nop
 80040a0:	58024400 	.word	0x58024400

080040a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80040a8:	f7fe fe00 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 80040ac:	4602      	mov	r2, r0
 80040ae:	4b06      	ldr	r3, [pc, #24]	@ (80040c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	091b      	lsrs	r3, r3, #4
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	4904      	ldr	r1, [pc, #16]	@ (80040cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80040ba:	5ccb      	ldrb	r3, [r1, r3]
 80040bc:	f003 031f 	and.w	r3, r3, #31
 80040c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	58024400 	.word	0x58024400
 80040cc:	08005d18 	.word	0x08005d18

080040d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b089      	sub	sp, #36	@ 0x24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040d8:	4ba1      	ldr	r3, [pc, #644]	@ (8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80040e2:	4b9f      	ldr	r3, [pc, #636]	@ (8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e6:	0b1b      	lsrs	r3, r3, #12
 80040e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80040ee:	4b9c      	ldr	r3, [pc, #624]	@ (8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f2:	091b      	lsrs	r3, r3, #4
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80040fa:	4b99      	ldr	r3, [pc, #612]	@ (8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040fe:	08db      	lsrs	r3, r3, #3
 8004100:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	fb02 f303 	mul.w	r3, r2, r3
 800410a:	ee07 3a90 	vmov	s15, r3
 800410e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004112:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 8111 	beq.w	8004340 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	2b02      	cmp	r3, #2
 8004122:	f000 8083 	beq.w	800422c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b02      	cmp	r3, #2
 800412a:	f200 80a1 	bhi.w	8004270 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d056      	beq.n	80041e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800413a:	e099      	b.n	8004270 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800413c:	4b88      	ldr	r3, [pc, #544]	@ (8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0320 	and.w	r3, r3, #32
 8004144:	2b00      	cmp	r3, #0
 8004146:	d02d      	beq.n	80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004148:	4b85      	ldr	r3, [pc, #532]	@ (8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	08db      	lsrs	r3, r3, #3
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	4a84      	ldr	r2, [pc, #528]	@ (8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004154:	fa22 f303 	lsr.w	r3, r2, r3
 8004158:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	ee07 3a90 	vmov	s15, r3
 8004160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004172:	4b7b      	ldr	r3, [pc, #492]	@ (8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004182:	ed97 6a03 	vldr	s12, [r7, #12]
 8004186:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004368 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800418a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800418e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800419a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800419e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80041a2:	e087      	b.n	80042b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	ee07 3a90 	vmov	s15, r3
 80041aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800436c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80041b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004368 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041e6:	e065      	b.n	80042b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	ee07 3a90 	vmov	s15, r3
 80041ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004370 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041fa:	4b59      	ldr	r3, [pc, #356]	@ (8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004202:	ee07 3a90 	vmov	s15, r3
 8004206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800420a:	ed97 6a03 	vldr	s12, [r7, #12]
 800420e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004368 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800421a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800421e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800422a:	e043      	b.n	80042b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	ee07 3a90 	vmov	s15, r3
 8004232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004236:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004374 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800423a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800423e:	4b48      	ldr	r3, [pc, #288]	@ (8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004246:	ee07 3a90 	vmov	s15, r3
 800424a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800424e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004252:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004368 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800425a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800425e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800426a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800426e:	e021      	b.n	80042b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	ee07 3a90 	vmov	s15, r3
 8004276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800427a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004370 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800427e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004282:	4b37      	ldr	r3, [pc, #220]	@ (8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800428a:	ee07 3a90 	vmov	s15, r3
 800428e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004292:	ed97 6a03 	vldr	s12, [r7, #12]
 8004296:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004368 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800429a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800429e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80042b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b8:	0a5b      	lsrs	r3, r3, #9
 80042ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80042d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042da:	ee17 2a90 	vmov	r2, s15
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80042e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e6:	0c1b      	lsrs	r3, r3, #16
 80042e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ec:	ee07 3a90 	vmov	s15, r3
 80042f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004308:	ee17 2a90 	vmov	r2, s15
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004310:	4b13      	ldr	r3, [pc, #76]	@ (8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004314:	0e1b      	lsrs	r3, r3, #24
 8004316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800431a:	ee07 3a90 	vmov	s15, r3
 800431e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004322:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004326:	ee37 7a87 	vadd.f32	s14, s15, s14
 800432a:	edd7 6a07 	vldr	s13, [r7, #28]
 800432e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004336:	ee17 2a90 	vmov	r2, s15
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800433e:	e008      	b.n	8004352 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	609a      	str	r2, [r3, #8]
}
 8004352:	bf00      	nop
 8004354:	3724      	adds	r7, #36	@ 0x24
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	58024400 	.word	0x58024400
 8004364:	03d09000 	.word	0x03d09000
 8004368:	46000000 	.word	0x46000000
 800436c:	4c742400 	.word	0x4c742400
 8004370:	4a742400 	.word	0x4a742400
 8004374:	4af42400 	.word	0x4af42400

08004378 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004378:	b480      	push	{r7}
 800437a:	b089      	sub	sp, #36	@ 0x24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004380:	4ba1      	ldr	r3, [pc, #644]	@ (8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800438a:	4b9f      	ldr	r3, [pc, #636]	@ (8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800438c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438e:	0d1b      	lsrs	r3, r3, #20
 8004390:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004394:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004396:	4b9c      	ldr	r3, [pc, #624]	@ (8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439a:	0a1b      	lsrs	r3, r3, #8
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80043a2:	4b99      	ldr	r3, [pc, #612]	@ (8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a6:	08db      	lsrs	r3, r3, #3
 80043a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	fb02 f303 	mul.w	r3, r2, r3
 80043b2:	ee07 3a90 	vmov	s15, r3
 80043b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 8111 	beq.w	80045e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	f000 8083 	beq.w	80044d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	f200 80a1 	bhi.w	8004518 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d056      	beq.n	8004490 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80043e2:	e099      	b.n	8004518 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043e4:	4b88      	ldr	r3, [pc, #544]	@ (8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d02d      	beq.n	800444c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043f0:	4b85      	ldr	r3, [pc, #532]	@ (8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	08db      	lsrs	r3, r3, #3
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	4a84      	ldr	r2, [pc, #528]	@ (800460c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80043fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004400:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	ee07 3a90 	vmov	s15, r3
 8004408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800441a:	4b7b      	ldr	r3, [pc, #492]	@ (8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442a:	ed97 6a03 	vldr	s12, [r7, #12]
 800442e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004610 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800443e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004446:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800444a:	e087      	b.n	800455c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	ee07 3a90 	vmov	s15, r3
 8004452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004456:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004614 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800445a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800445e:	4b6a      	ldr	r3, [pc, #424]	@ (8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004472:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004610 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800447a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800447e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800448e:	e065      	b.n	800455c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800449e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044a2:	4b59      	ldr	r3, [pc, #356]	@ (8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044b6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004610 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044d2:	e043      	b.n	800455c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	ee07 3a90 	vmov	s15, r3
 80044da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044de:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800461c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80044e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044e6:	4b48      	ldr	r3, [pc, #288]	@ (8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044fa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004610 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800450a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800450e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004516:	e021      	b.n	800455c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004522:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004618 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800452a:	4b37      	ldr	r3, [pc, #220]	@ (8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800453a:	ed97 6a03 	vldr	s12, [r7, #12]
 800453e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004610 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800454a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800454e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800455a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800455c:	4b2a      	ldr	r3, [pc, #168]	@ (8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800455e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004560:	0a5b      	lsrs	r3, r3, #9
 8004562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004572:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004576:	edd7 6a07 	vldr	s13, [r7, #28]
 800457a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800457e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004582:	ee17 2a90 	vmov	r2, s15
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800458a:	4b1f      	ldr	r3, [pc, #124]	@ (8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458e:	0c1b      	lsrs	r3, r3, #16
 8004590:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004594:	ee07 3a90 	vmov	s15, r3
 8004598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80045a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045b0:	ee17 2a90 	vmov	r2, s15
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80045b8:	4b13      	ldr	r3, [pc, #76]	@ (8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045bc:	0e1b      	lsrs	r3, r3, #24
 80045be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045c2:	ee07 3a90 	vmov	s15, r3
 80045c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80045d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045de:	ee17 2a90 	vmov	r2, s15
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80045e6:	e008      	b.n	80045fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	609a      	str	r2, [r3, #8]
}
 80045fa:	bf00      	nop
 80045fc:	3724      	adds	r7, #36	@ 0x24
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	58024400 	.word	0x58024400
 800460c:	03d09000 	.word	0x03d09000
 8004610:	46000000 	.word	0x46000000
 8004614:	4c742400 	.word	0x4c742400
 8004618:	4a742400 	.word	0x4a742400
 800461c:	4af42400 	.word	0x4af42400

08004620 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800462e:	4b53      	ldr	r3, [pc, #332]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 8004630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	2b03      	cmp	r3, #3
 8004638:	d101      	bne.n	800463e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e099      	b.n	8004772 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800463e:	4b4f      	ldr	r3, [pc, #316]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a4e      	ldr	r2, [pc, #312]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 8004644:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004648:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800464a:	f7fc fcb3 	bl	8000fb4 <HAL_GetTick>
 800464e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004650:	e008      	b.n	8004664 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004652:	f7fc fcaf 	bl	8000fb4 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e086      	b.n	8004772 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004664:	4b45      	ldr	r3, [pc, #276]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1f0      	bne.n	8004652 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004670:	4b42      	ldr	r3, [pc, #264]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 8004672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004674:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	031b      	lsls	r3, r3, #12
 800467e:	493f      	ldr	r1, [pc, #252]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 8004680:	4313      	orrs	r3, r2
 8004682:	628b      	str	r3, [r1, #40]	@ 0x28
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	3b01      	subs	r3, #1
 800468a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	3b01      	subs	r3, #1
 8004694:	025b      	lsls	r3, r3, #9
 8004696:	b29b      	uxth	r3, r3
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	3b01      	subs	r3, #1
 80046a0:	041b      	lsls	r3, r3, #16
 80046a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	061b      	lsls	r3, r3, #24
 80046b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80046b4:	4931      	ldr	r1, [pc, #196]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80046ba:	4b30      	ldr	r3, [pc, #192]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 80046bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	492d      	ldr	r1, [pc, #180]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80046cc:	4b2b      	ldr	r3, [pc, #172]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 80046ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d0:	f023 0220 	bic.w	r2, r3, #32
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	4928      	ldr	r1, [pc, #160]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80046de:	4b27      	ldr	r3, [pc, #156]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 80046e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e2:	4a26      	ldr	r2, [pc, #152]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 80046e4:	f023 0310 	bic.w	r3, r3, #16
 80046e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80046ea:	4b24      	ldr	r3, [pc, #144]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 80046ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046ee:	4b24      	ldr	r3, [pc, #144]	@ (8004780 <RCCEx_PLL2_Config+0x160>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	69d2      	ldr	r2, [r2, #28]
 80046f6:	00d2      	lsls	r2, r2, #3
 80046f8:	4920      	ldr	r1, [pc, #128]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80046fe:	4b1f      	ldr	r3, [pc, #124]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 8004700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004702:	4a1e      	ldr	r2, [pc, #120]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 8004704:	f043 0310 	orr.w	r3, r3, #16
 8004708:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d106      	bne.n	800471e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004710:	4b1a      	ldr	r3, [pc, #104]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 8004712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004714:	4a19      	ldr	r2, [pc, #100]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 8004716:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800471a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800471c:	e00f      	b.n	800473e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d106      	bne.n	8004732 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004724:	4b15      	ldr	r3, [pc, #84]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 8004726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004728:	4a14      	ldr	r2, [pc, #80]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 800472a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800472e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004730:	e005      	b.n	800473e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004732:	4b12      	ldr	r3, [pc, #72]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 8004734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004736:	4a11      	ldr	r2, [pc, #68]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 8004738:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800473c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800473e:	4b0f      	ldr	r3, [pc, #60]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a0e      	ldr	r2, [pc, #56]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 8004744:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800474a:	f7fc fc33 	bl	8000fb4 <HAL_GetTick>
 800474e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004750:	e008      	b.n	8004764 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004752:	f7fc fc2f 	bl	8000fb4 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e006      	b.n	8004772 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004764:	4b05      	ldr	r3, [pc, #20]	@ (800477c <RCCEx_PLL2_Config+0x15c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004770:	7bfb      	ldrb	r3, [r7, #15]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	58024400 	.word	0x58024400
 8004780:	ffff0007 	.word	0xffff0007

08004784 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004792:	4b53      	ldr	r3, [pc, #332]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 8004794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	2b03      	cmp	r3, #3
 800479c:	d101      	bne.n	80047a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e099      	b.n	80048d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80047a2:	4b4f      	ldr	r3, [pc, #316]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a4e      	ldr	r2, [pc, #312]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 80047a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ae:	f7fc fc01 	bl	8000fb4 <HAL_GetTick>
 80047b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047b4:	e008      	b.n	80047c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80047b6:	f7fc fbfd 	bl	8000fb4 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e086      	b.n	80048d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047c8:	4b45      	ldr	r3, [pc, #276]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f0      	bne.n	80047b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80047d4:	4b42      	ldr	r3, [pc, #264]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 80047d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	051b      	lsls	r3, r3, #20
 80047e2:	493f      	ldr	r1, [pc, #252]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	025b      	lsls	r3, r3, #9
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	3b01      	subs	r3, #1
 8004804:	041b      	lsls	r3, r3, #16
 8004806:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	3b01      	subs	r3, #1
 8004812:	061b      	lsls	r3, r3, #24
 8004814:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004818:	4931      	ldr	r1, [pc, #196]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 800481a:	4313      	orrs	r3, r2
 800481c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800481e:	4b30      	ldr	r3, [pc, #192]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 8004820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004822:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	492d      	ldr	r1, [pc, #180]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 800482c:	4313      	orrs	r3, r2
 800482e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004830:	4b2b      	ldr	r3, [pc, #172]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 8004832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004834:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	4928      	ldr	r1, [pc, #160]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 800483e:	4313      	orrs	r3, r2
 8004840:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004842:	4b27      	ldr	r3, [pc, #156]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 8004844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004846:	4a26      	ldr	r2, [pc, #152]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 8004848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800484c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800484e:	4b24      	ldr	r3, [pc, #144]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 8004850:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004852:	4b24      	ldr	r3, [pc, #144]	@ (80048e4 <RCCEx_PLL3_Config+0x160>)
 8004854:	4013      	ands	r3, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	69d2      	ldr	r2, [r2, #28]
 800485a:	00d2      	lsls	r2, r2, #3
 800485c:	4920      	ldr	r1, [pc, #128]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 800485e:	4313      	orrs	r3, r2
 8004860:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004862:	4b1f      	ldr	r3, [pc, #124]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 8004864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004866:	4a1e      	ldr	r2, [pc, #120]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 8004868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800486c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d106      	bne.n	8004882 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004874:	4b1a      	ldr	r3, [pc, #104]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 8004876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004878:	4a19      	ldr	r2, [pc, #100]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 800487a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800487e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004880:	e00f      	b.n	80048a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d106      	bne.n	8004896 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004888:	4b15      	ldr	r3, [pc, #84]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 800488a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488c:	4a14      	ldr	r2, [pc, #80]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 800488e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004892:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004894:	e005      	b.n	80048a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004896:	4b12      	ldr	r3, [pc, #72]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 8004898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489a:	4a11      	ldr	r2, [pc, #68]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 800489c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80048a2:	4b0f      	ldr	r3, [pc, #60]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a0e      	ldr	r2, [pc, #56]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 80048a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ae:	f7fc fb81 	bl	8000fb4 <HAL_GetTick>
 80048b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048b4:	e008      	b.n	80048c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80048b6:	f7fc fb7d 	bl	8000fb4 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e006      	b.n	80048d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048c8:	4b05      	ldr	r3, [pc, #20]	@ (80048e0 <RCCEx_PLL3_Config+0x15c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	58024400 	.word	0x58024400
 80048e4:	ffff0007 	.word	0xffff0007

080048e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e042      	b.n	8004980 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004900:	2b00      	cmp	r3, #0
 8004902:	d106      	bne.n	8004912 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7fc f98f 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2224      	movs	r2, #36	@ 0x24
 8004916:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0201 	bic.w	r2, r2, #1
 8004928:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fe94 	bl	8005660 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f825 	bl	8004988 <UART_SetConfig>
 800493e:	4603      	mov	r3, r0
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e01b      	b.n	8004980 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004956:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004966:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 ff13 	bl	80057a4 <UART_CheckIdleState>
 800497e:	4603      	mov	r3, r0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800498c:	b092      	sub	sp, #72	@ 0x48
 800498e:	af00      	add	r7, sp, #0
 8004990:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	4bbe      	ldr	r3, [pc, #760]	@ (8004cb0 <UART_SetConfig+0x328>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80049c0:	430b      	orrs	r3, r1
 80049c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4ab3      	ldr	r2, [pc, #716]	@ (8004cb4 <UART_SetConfig+0x32c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d004      	beq.n	80049f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049f0:	4313      	orrs	r3, r2
 80049f2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	4baf      	ldr	r3, [pc, #700]	@ (8004cb8 <UART_SetConfig+0x330>)
 80049fc:	4013      	ands	r3, r2
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004a04:	430b      	orrs	r3, r1
 8004a06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0e:	f023 010f 	bic.w	r1, r3, #15
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4aa6      	ldr	r2, [pc, #664]	@ (8004cbc <UART_SetConfig+0x334>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d177      	bne.n	8004b18 <UART_SetConfig+0x190>
 8004a28:	4ba5      	ldr	r3, [pc, #660]	@ (8004cc0 <UART_SetConfig+0x338>)
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a30:	2b28      	cmp	r3, #40	@ 0x28
 8004a32:	d86d      	bhi.n	8004b10 <UART_SetConfig+0x188>
 8004a34:	a201      	add	r2, pc, #4	@ (adr r2, 8004a3c <UART_SetConfig+0xb4>)
 8004a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3a:	bf00      	nop
 8004a3c:	08004ae1 	.word	0x08004ae1
 8004a40:	08004b11 	.word	0x08004b11
 8004a44:	08004b11 	.word	0x08004b11
 8004a48:	08004b11 	.word	0x08004b11
 8004a4c:	08004b11 	.word	0x08004b11
 8004a50:	08004b11 	.word	0x08004b11
 8004a54:	08004b11 	.word	0x08004b11
 8004a58:	08004b11 	.word	0x08004b11
 8004a5c:	08004ae9 	.word	0x08004ae9
 8004a60:	08004b11 	.word	0x08004b11
 8004a64:	08004b11 	.word	0x08004b11
 8004a68:	08004b11 	.word	0x08004b11
 8004a6c:	08004b11 	.word	0x08004b11
 8004a70:	08004b11 	.word	0x08004b11
 8004a74:	08004b11 	.word	0x08004b11
 8004a78:	08004b11 	.word	0x08004b11
 8004a7c:	08004af1 	.word	0x08004af1
 8004a80:	08004b11 	.word	0x08004b11
 8004a84:	08004b11 	.word	0x08004b11
 8004a88:	08004b11 	.word	0x08004b11
 8004a8c:	08004b11 	.word	0x08004b11
 8004a90:	08004b11 	.word	0x08004b11
 8004a94:	08004b11 	.word	0x08004b11
 8004a98:	08004b11 	.word	0x08004b11
 8004a9c:	08004af9 	.word	0x08004af9
 8004aa0:	08004b11 	.word	0x08004b11
 8004aa4:	08004b11 	.word	0x08004b11
 8004aa8:	08004b11 	.word	0x08004b11
 8004aac:	08004b11 	.word	0x08004b11
 8004ab0:	08004b11 	.word	0x08004b11
 8004ab4:	08004b11 	.word	0x08004b11
 8004ab8:	08004b11 	.word	0x08004b11
 8004abc:	08004b01 	.word	0x08004b01
 8004ac0:	08004b11 	.word	0x08004b11
 8004ac4:	08004b11 	.word	0x08004b11
 8004ac8:	08004b11 	.word	0x08004b11
 8004acc:	08004b11 	.word	0x08004b11
 8004ad0:	08004b11 	.word	0x08004b11
 8004ad4:	08004b11 	.word	0x08004b11
 8004ad8:	08004b11 	.word	0x08004b11
 8004adc:	08004b09 	.word	0x08004b09
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ae6:	e326      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aee:	e322      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004af0:	2308      	movs	r3, #8
 8004af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004af6:	e31e      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004af8:	2310      	movs	r3, #16
 8004afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004afe:	e31a      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004b00:	2320      	movs	r3, #32
 8004b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b06:	e316      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004b08:	2340      	movs	r3, #64	@ 0x40
 8004b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b0e:	e312      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004b10:	2380      	movs	r3, #128	@ 0x80
 8004b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b16:	e30e      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a69      	ldr	r2, [pc, #420]	@ (8004cc4 <UART_SetConfig+0x33c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d130      	bne.n	8004b84 <UART_SetConfig+0x1fc>
 8004b22:	4b67      	ldr	r3, [pc, #412]	@ (8004cc0 <UART_SetConfig+0x338>)
 8004b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	2b05      	cmp	r3, #5
 8004b2c:	d826      	bhi.n	8004b7c <UART_SetConfig+0x1f4>
 8004b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b34 <UART_SetConfig+0x1ac>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004b4d 	.word	0x08004b4d
 8004b38:	08004b55 	.word	0x08004b55
 8004b3c:	08004b5d 	.word	0x08004b5d
 8004b40:	08004b65 	.word	0x08004b65
 8004b44:	08004b6d 	.word	0x08004b6d
 8004b48:	08004b75 	.word	0x08004b75
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b52:	e2f0      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004b54:	2304      	movs	r3, #4
 8004b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b5a:	e2ec      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004b5c:	2308      	movs	r3, #8
 8004b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b62:	e2e8      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004b64:	2310      	movs	r3, #16
 8004b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b6a:	e2e4      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004b6c:	2320      	movs	r3, #32
 8004b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b72:	e2e0      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004b74:	2340      	movs	r3, #64	@ 0x40
 8004b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b7a:	e2dc      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004b7c:	2380      	movs	r3, #128	@ 0x80
 8004b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b82:	e2d8      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a4f      	ldr	r2, [pc, #316]	@ (8004cc8 <UART_SetConfig+0x340>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d130      	bne.n	8004bf0 <UART_SetConfig+0x268>
 8004b8e:	4b4c      	ldr	r3, [pc, #304]	@ (8004cc0 <UART_SetConfig+0x338>)
 8004b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	2b05      	cmp	r3, #5
 8004b98:	d826      	bhi.n	8004be8 <UART_SetConfig+0x260>
 8004b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba0 <UART_SetConfig+0x218>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004bb9 	.word	0x08004bb9
 8004ba4:	08004bc1 	.word	0x08004bc1
 8004ba8:	08004bc9 	.word	0x08004bc9
 8004bac:	08004bd1 	.word	0x08004bd1
 8004bb0:	08004bd9 	.word	0x08004bd9
 8004bb4:	08004be1 	.word	0x08004be1
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bbe:	e2ba      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bc6:	e2b6      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004bc8:	2308      	movs	r3, #8
 8004bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bce:	e2b2      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bd6:	e2ae      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004bd8:	2320      	movs	r3, #32
 8004bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bde:	e2aa      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004be0:	2340      	movs	r3, #64	@ 0x40
 8004be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004be6:	e2a6      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004be8:	2380      	movs	r3, #128	@ 0x80
 8004bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bee:	e2a2      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a35      	ldr	r2, [pc, #212]	@ (8004ccc <UART_SetConfig+0x344>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d130      	bne.n	8004c5c <UART_SetConfig+0x2d4>
 8004bfa:	4b31      	ldr	r3, [pc, #196]	@ (8004cc0 <UART_SetConfig+0x338>)
 8004bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	2b05      	cmp	r3, #5
 8004c04:	d826      	bhi.n	8004c54 <UART_SetConfig+0x2cc>
 8004c06:	a201      	add	r2, pc, #4	@ (adr r2, 8004c0c <UART_SetConfig+0x284>)
 8004c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0c:	08004c25 	.word	0x08004c25
 8004c10:	08004c2d 	.word	0x08004c2d
 8004c14:	08004c35 	.word	0x08004c35
 8004c18:	08004c3d 	.word	0x08004c3d
 8004c1c:	08004c45 	.word	0x08004c45
 8004c20:	08004c4d 	.word	0x08004c4d
 8004c24:	2300      	movs	r3, #0
 8004c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c2a:	e284      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c32:	e280      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004c34:	2308      	movs	r3, #8
 8004c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c3a:	e27c      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c42:	e278      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004c44:	2320      	movs	r3, #32
 8004c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c4a:	e274      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004c4c:	2340      	movs	r3, #64	@ 0x40
 8004c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c52:	e270      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004c54:	2380      	movs	r3, #128	@ 0x80
 8004c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c5a:	e26c      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd0 <UART_SetConfig+0x348>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d142      	bne.n	8004cec <UART_SetConfig+0x364>
 8004c66:	4b16      	ldr	r3, [pc, #88]	@ (8004cc0 <UART_SetConfig+0x338>)
 8004c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	2b05      	cmp	r3, #5
 8004c70:	d838      	bhi.n	8004ce4 <UART_SetConfig+0x35c>
 8004c72:	a201      	add	r2, pc, #4	@ (adr r2, 8004c78 <UART_SetConfig+0x2f0>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004c91 	.word	0x08004c91
 8004c7c:	08004c99 	.word	0x08004c99
 8004c80:	08004ca1 	.word	0x08004ca1
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004cd5 	.word	0x08004cd5
 8004c8c:	08004cdd 	.word	0x08004cdd
 8004c90:	2300      	movs	r3, #0
 8004c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c96:	e24e      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004c98:	2304      	movs	r3, #4
 8004c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c9e:	e24a      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004ca0:	2308      	movs	r3, #8
 8004ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ca6:	e246      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004ca8:	2310      	movs	r3, #16
 8004caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cae:	e242      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004cb0:	cfff69f3 	.word	0xcfff69f3
 8004cb4:	58000c00 	.word	0x58000c00
 8004cb8:	11fff4ff 	.word	0x11fff4ff
 8004cbc:	40011000 	.word	0x40011000
 8004cc0:	58024400 	.word	0x58024400
 8004cc4:	40004400 	.word	0x40004400
 8004cc8:	40004800 	.word	0x40004800
 8004ccc:	40004c00 	.word	0x40004c00
 8004cd0:	40005000 	.word	0x40005000
 8004cd4:	2320      	movs	r3, #32
 8004cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cda:	e22c      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004cdc:	2340      	movs	r3, #64	@ 0x40
 8004cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ce2:	e228      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004ce4:	2380      	movs	r3, #128	@ 0x80
 8004ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cea:	e224      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4ab1      	ldr	r2, [pc, #708]	@ (8004fb8 <UART_SetConfig+0x630>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d176      	bne.n	8004de4 <UART_SetConfig+0x45c>
 8004cf6:	4bb1      	ldr	r3, [pc, #708]	@ (8004fbc <UART_SetConfig+0x634>)
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cfe:	2b28      	cmp	r3, #40	@ 0x28
 8004d00:	d86c      	bhi.n	8004ddc <UART_SetConfig+0x454>
 8004d02:	a201      	add	r2, pc, #4	@ (adr r2, 8004d08 <UART_SetConfig+0x380>)
 8004d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d08:	08004dad 	.word	0x08004dad
 8004d0c:	08004ddd 	.word	0x08004ddd
 8004d10:	08004ddd 	.word	0x08004ddd
 8004d14:	08004ddd 	.word	0x08004ddd
 8004d18:	08004ddd 	.word	0x08004ddd
 8004d1c:	08004ddd 	.word	0x08004ddd
 8004d20:	08004ddd 	.word	0x08004ddd
 8004d24:	08004ddd 	.word	0x08004ddd
 8004d28:	08004db5 	.word	0x08004db5
 8004d2c:	08004ddd 	.word	0x08004ddd
 8004d30:	08004ddd 	.word	0x08004ddd
 8004d34:	08004ddd 	.word	0x08004ddd
 8004d38:	08004ddd 	.word	0x08004ddd
 8004d3c:	08004ddd 	.word	0x08004ddd
 8004d40:	08004ddd 	.word	0x08004ddd
 8004d44:	08004ddd 	.word	0x08004ddd
 8004d48:	08004dbd 	.word	0x08004dbd
 8004d4c:	08004ddd 	.word	0x08004ddd
 8004d50:	08004ddd 	.word	0x08004ddd
 8004d54:	08004ddd 	.word	0x08004ddd
 8004d58:	08004ddd 	.word	0x08004ddd
 8004d5c:	08004ddd 	.word	0x08004ddd
 8004d60:	08004ddd 	.word	0x08004ddd
 8004d64:	08004ddd 	.word	0x08004ddd
 8004d68:	08004dc5 	.word	0x08004dc5
 8004d6c:	08004ddd 	.word	0x08004ddd
 8004d70:	08004ddd 	.word	0x08004ddd
 8004d74:	08004ddd 	.word	0x08004ddd
 8004d78:	08004ddd 	.word	0x08004ddd
 8004d7c:	08004ddd 	.word	0x08004ddd
 8004d80:	08004ddd 	.word	0x08004ddd
 8004d84:	08004ddd 	.word	0x08004ddd
 8004d88:	08004dcd 	.word	0x08004dcd
 8004d8c:	08004ddd 	.word	0x08004ddd
 8004d90:	08004ddd 	.word	0x08004ddd
 8004d94:	08004ddd 	.word	0x08004ddd
 8004d98:	08004ddd 	.word	0x08004ddd
 8004d9c:	08004ddd 	.word	0x08004ddd
 8004da0:	08004ddd 	.word	0x08004ddd
 8004da4:	08004ddd 	.word	0x08004ddd
 8004da8:	08004dd5 	.word	0x08004dd5
 8004dac:	2301      	movs	r3, #1
 8004dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004db2:	e1c0      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004db4:	2304      	movs	r3, #4
 8004db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dba:	e1bc      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004dbc:	2308      	movs	r3, #8
 8004dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dc2:	e1b8      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dca:	e1b4      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004dcc:	2320      	movs	r3, #32
 8004dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dd2:	e1b0      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004dd4:	2340      	movs	r3, #64	@ 0x40
 8004dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dda:	e1ac      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004ddc:	2380      	movs	r3, #128	@ 0x80
 8004dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004de2:	e1a8      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a75      	ldr	r2, [pc, #468]	@ (8004fc0 <UART_SetConfig+0x638>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d130      	bne.n	8004e50 <UART_SetConfig+0x4c8>
 8004dee:	4b73      	ldr	r3, [pc, #460]	@ (8004fbc <UART_SetConfig+0x634>)
 8004df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	2b05      	cmp	r3, #5
 8004df8:	d826      	bhi.n	8004e48 <UART_SetConfig+0x4c0>
 8004dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8004e00 <UART_SetConfig+0x478>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004e19 	.word	0x08004e19
 8004e04:	08004e21 	.word	0x08004e21
 8004e08:	08004e29 	.word	0x08004e29
 8004e0c:	08004e31 	.word	0x08004e31
 8004e10:	08004e39 	.word	0x08004e39
 8004e14:	08004e41 	.word	0x08004e41
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e1e:	e18a      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004e20:	2304      	movs	r3, #4
 8004e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e26:	e186      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004e28:	2308      	movs	r3, #8
 8004e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e2e:	e182      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004e30:	2310      	movs	r3, #16
 8004e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e36:	e17e      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004e38:	2320      	movs	r3, #32
 8004e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e3e:	e17a      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004e40:	2340      	movs	r3, #64	@ 0x40
 8004e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e46:	e176      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004e48:	2380      	movs	r3, #128	@ 0x80
 8004e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e4e:	e172      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a5b      	ldr	r2, [pc, #364]	@ (8004fc4 <UART_SetConfig+0x63c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d130      	bne.n	8004ebc <UART_SetConfig+0x534>
 8004e5a:	4b58      	ldr	r3, [pc, #352]	@ (8004fbc <UART_SetConfig+0x634>)
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	2b05      	cmp	r3, #5
 8004e64:	d826      	bhi.n	8004eb4 <UART_SetConfig+0x52c>
 8004e66:	a201      	add	r2, pc, #4	@ (adr r2, 8004e6c <UART_SetConfig+0x4e4>)
 8004e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6c:	08004e85 	.word	0x08004e85
 8004e70:	08004e8d 	.word	0x08004e8d
 8004e74:	08004e95 	.word	0x08004e95
 8004e78:	08004e9d 	.word	0x08004e9d
 8004e7c:	08004ea5 	.word	0x08004ea5
 8004e80:	08004ead 	.word	0x08004ead
 8004e84:	2300      	movs	r3, #0
 8004e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e8a:	e154      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e92:	e150      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004e94:	2308      	movs	r3, #8
 8004e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e9a:	e14c      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ea2:	e148      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004ea4:	2320      	movs	r3, #32
 8004ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eaa:	e144      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004eac:	2340      	movs	r3, #64	@ 0x40
 8004eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eb2:	e140      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004eb4:	2380      	movs	r3, #128	@ 0x80
 8004eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eba:	e13c      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a41      	ldr	r2, [pc, #260]	@ (8004fc8 <UART_SetConfig+0x640>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	f040 8082 	bne.w	8004fcc <UART_SetConfig+0x644>
 8004ec8:	4b3c      	ldr	r3, [pc, #240]	@ (8004fbc <UART_SetConfig+0x634>)
 8004eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ecc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ed0:	2b28      	cmp	r3, #40	@ 0x28
 8004ed2:	d86d      	bhi.n	8004fb0 <UART_SetConfig+0x628>
 8004ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8004edc <UART_SetConfig+0x554>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004f81 	.word	0x08004f81
 8004ee0:	08004fb1 	.word	0x08004fb1
 8004ee4:	08004fb1 	.word	0x08004fb1
 8004ee8:	08004fb1 	.word	0x08004fb1
 8004eec:	08004fb1 	.word	0x08004fb1
 8004ef0:	08004fb1 	.word	0x08004fb1
 8004ef4:	08004fb1 	.word	0x08004fb1
 8004ef8:	08004fb1 	.word	0x08004fb1
 8004efc:	08004f89 	.word	0x08004f89
 8004f00:	08004fb1 	.word	0x08004fb1
 8004f04:	08004fb1 	.word	0x08004fb1
 8004f08:	08004fb1 	.word	0x08004fb1
 8004f0c:	08004fb1 	.word	0x08004fb1
 8004f10:	08004fb1 	.word	0x08004fb1
 8004f14:	08004fb1 	.word	0x08004fb1
 8004f18:	08004fb1 	.word	0x08004fb1
 8004f1c:	08004f91 	.word	0x08004f91
 8004f20:	08004fb1 	.word	0x08004fb1
 8004f24:	08004fb1 	.word	0x08004fb1
 8004f28:	08004fb1 	.word	0x08004fb1
 8004f2c:	08004fb1 	.word	0x08004fb1
 8004f30:	08004fb1 	.word	0x08004fb1
 8004f34:	08004fb1 	.word	0x08004fb1
 8004f38:	08004fb1 	.word	0x08004fb1
 8004f3c:	08004f99 	.word	0x08004f99
 8004f40:	08004fb1 	.word	0x08004fb1
 8004f44:	08004fb1 	.word	0x08004fb1
 8004f48:	08004fb1 	.word	0x08004fb1
 8004f4c:	08004fb1 	.word	0x08004fb1
 8004f50:	08004fb1 	.word	0x08004fb1
 8004f54:	08004fb1 	.word	0x08004fb1
 8004f58:	08004fb1 	.word	0x08004fb1
 8004f5c:	08004fa1 	.word	0x08004fa1
 8004f60:	08004fb1 	.word	0x08004fb1
 8004f64:	08004fb1 	.word	0x08004fb1
 8004f68:	08004fb1 	.word	0x08004fb1
 8004f6c:	08004fb1 	.word	0x08004fb1
 8004f70:	08004fb1 	.word	0x08004fb1
 8004f74:	08004fb1 	.word	0x08004fb1
 8004f78:	08004fb1 	.word	0x08004fb1
 8004f7c:	08004fa9 	.word	0x08004fa9
 8004f80:	2301      	movs	r3, #1
 8004f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f86:	e0d6      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004f88:	2304      	movs	r3, #4
 8004f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f8e:	e0d2      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004f90:	2308      	movs	r3, #8
 8004f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f96:	e0ce      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004f98:	2310      	movs	r3, #16
 8004f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f9e:	e0ca      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004fa0:	2320      	movs	r3, #32
 8004fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fa6:	e0c6      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004fa8:	2340      	movs	r3, #64	@ 0x40
 8004faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fae:	e0c2      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004fb0:	2380      	movs	r3, #128	@ 0x80
 8004fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fb6:	e0be      	b.n	8005136 <UART_SetConfig+0x7ae>
 8004fb8:	40011400 	.word	0x40011400
 8004fbc:	58024400 	.word	0x58024400
 8004fc0:	40007800 	.word	0x40007800
 8004fc4:	40007c00 	.word	0x40007c00
 8004fc8:	40011800 	.word	0x40011800
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4aad      	ldr	r2, [pc, #692]	@ (8005288 <UART_SetConfig+0x900>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d176      	bne.n	80050c4 <UART_SetConfig+0x73c>
 8004fd6:	4bad      	ldr	r3, [pc, #692]	@ (800528c <UART_SetConfig+0x904>)
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fde:	2b28      	cmp	r3, #40	@ 0x28
 8004fe0:	d86c      	bhi.n	80050bc <UART_SetConfig+0x734>
 8004fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe8 <UART_SetConfig+0x660>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	0800508d 	.word	0x0800508d
 8004fec:	080050bd 	.word	0x080050bd
 8004ff0:	080050bd 	.word	0x080050bd
 8004ff4:	080050bd 	.word	0x080050bd
 8004ff8:	080050bd 	.word	0x080050bd
 8004ffc:	080050bd 	.word	0x080050bd
 8005000:	080050bd 	.word	0x080050bd
 8005004:	080050bd 	.word	0x080050bd
 8005008:	08005095 	.word	0x08005095
 800500c:	080050bd 	.word	0x080050bd
 8005010:	080050bd 	.word	0x080050bd
 8005014:	080050bd 	.word	0x080050bd
 8005018:	080050bd 	.word	0x080050bd
 800501c:	080050bd 	.word	0x080050bd
 8005020:	080050bd 	.word	0x080050bd
 8005024:	080050bd 	.word	0x080050bd
 8005028:	0800509d 	.word	0x0800509d
 800502c:	080050bd 	.word	0x080050bd
 8005030:	080050bd 	.word	0x080050bd
 8005034:	080050bd 	.word	0x080050bd
 8005038:	080050bd 	.word	0x080050bd
 800503c:	080050bd 	.word	0x080050bd
 8005040:	080050bd 	.word	0x080050bd
 8005044:	080050bd 	.word	0x080050bd
 8005048:	080050a5 	.word	0x080050a5
 800504c:	080050bd 	.word	0x080050bd
 8005050:	080050bd 	.word	0x080050bd
 8005054:	080050bd 	.word	0x080050bd
 8005058:	080050bd 	.word	0x080050bd
 800505c:	080050bd 	.word	0x080050bd
 8005060:	080050bd 	.word	0x080050bd
 8005064:	080050bd 	.word	0x080050bd
 8005068:	080050ad 	.word	0x080050ad
 800506c:	080050bd 	.word	0x080050bd
 8005070:	080050bd 	.word	0x080050bd
 8005074:	080050bd 	.word	0x080050bd
 8005078:	080050bd 	.word	0x080050bd
 800507c:	080050bd 	.word	0x080050bd
 8005080:	080050bd 	.word	0x080050bd
 8005084:	080050bd 	.word	0x080050bd
 8005088:	080050b5 	.word	0x080050b5
 800508c:	2301      	movs	r3, #1
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005092:	e050      	b.n	8005136 <UART_SetConfig+0x7ae>
 8005094:	2304      	movs	r3, #4
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800509a:	e04c      	b.n	8005136 <UART_SetConfig+0x7ae>
 800509c:	2308      	movs	r3, #8
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050a2:	e048      	b.n	8005136 <UART_SetConfig+0x7ae>
 80050a4:	2310      	movs	r3, #16
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050aa:	e044      	b.n	8005136 <UART_SetConfig+0x7ae>
 80050ac:	2320      	movs	r3, #32
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050b2:	e040      	b.n	8005136 <UART_SetConfig+0x7ae>
 80050b4:	2340      	movs	r3, #64	@ 0x40
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ba:	e03c      	b.n	8005136 <UART_SetConfig+0x7ae>
 80050bc:	2380      	movs	r3, #128	@ 0x80
 80050be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050c2:	e038      	b.n	8005136 <UART_SetConfig+0x7ae>
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a71      	ldr	r2, [pc, #452]	@ (8005290 <UART_SetConfig+0x908>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d130      	bne.n	8005130 <UART_SetConfig+0x7a8>
 80050ce:	4b6f      	ldr	r3, [pc, #444]	@ (800528c <UART_SetConfig+0x904>)
 80050d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	2b05      	cmp	r3, #5
 80050d8:	d826      	bhi.n	8005128 <UART_SetConfig+0x7a0>
 80050da:	a201      	add	r2, pc, #4	@ (adr r2, 80050e0 <UART_SetConfig+0x758>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	080050f9 	.word	0x080050f9
 80050e4:	08005101 	.word	0x08005101
 80050e8:	08005109 	.word	0x08005109
 80050ec:	08005111 	.word	0x08005111
 80050f0:	08005119 	.word	0x08005119
 80050f4:	08005121 	.word	0x08005121
 80050f8:	2302      	movs	r3, #2
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050fe:	e01a      	b.n	8005136 <UART_SetConfig+0x7ae>
 8005100:	2304      	movs	r3, #4
 8005102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005106:	e016      	b.n	8005136 <UART_SetConfig+0x7ae>
 8005108:	2308      	movs	r3, #8
 800510a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800510e:	e012      	b.n	8005136 <UART_SetConfig+0x7ae>
 8005110:	2310      	movs	r3, #16
 8005112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005116:	e00e      	b.n	8005136 <UART_SetConfig+0x7ae>
 8005118:	2320      	movs	r3, #32
 800511a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800511e:	e00a      	b.n	8005136 <UART_SetConfig+0x7ae>
 8005120:	2340      	movs	r3, #64	@ 0x40
 8005122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005126:	e006      	b.n	8005136 <UART_SetConfig+0x7ae>
 8005128:	2380      	movs	r3, #128	@ 0x80
 800512a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800512e:	e002      	b.n	8005136 <UART_SetConfig+0x7ae>
 8005130:	2380      	movs	r3, #128	@ 0x80
 8005132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a55      	ldr	r2, [pc, #340]	@ (8005290 <UART_SetConfig+0x908>)
 800513c:	4293      	cmp	r3, r2
 800513e:	f040 80f8 	bne.w	8005332 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005142:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005146:	2b20      	cmp	r3, #32
 8005148:	dc46      	bgt.n	80051d8 <UART_SetConfig+0x850>
 800514a:	2b02      	cmp	r3, #2
 800514c:	db75      	blt.n	800523a <UART_SetConfig+0x8b2>
 800514e:	3b02      	subs	r3, #2
 8005150:	2b1e      	cmp	r3, #30
 8005152:	d872      	bhi.n	800523a <UART_SetConfig+0x8b2>
 8005154:	a201      	add	r2, pc, #4	@ (adr r2, 800515c <UART_SetConfig+0x7d4>)
 8005156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515a:	bf00      	nop
 800515c:	080051df 	.word	0x080051df
 8005160:	0800523b 	.word	0x0800523b
 8005164:	080051e7 	.word	0x080051e7
 8005168:	0800523b 	.word	0x0800523b
 800516c:	0800523b 	.word	0x0800523b
 8005170:	0800523b 	.word	0x0800523b
 8005174:	080051f7 	.word	0x080051f7
 8005178:	0800523b 	.word	0x0800523b
 800517c:	0800523b 	.word	0x0800523b
 8005180:	0800523b 	.word	0x0800523b
 8005184:	0800523b 	.word	0x0800523b
 8005188:	0800523b 	.word	0x0800523b
 800518c:	0800523b 	.word	0x0800523b
 8005190:	0800523b 	.word	0x0800523b
 8005194:	08005207 	.word	0x08005207
 8005198:	0800523b 	.word	0x0800523b
 800519c:	0800523b 	.word	0x0800523b
 80051a0:	0800523b 	.word	0x0800523b
 80051a4:	0800523b 	.word	0x0800523b
 80051a8:	0800523b 	.word	0x0800523b
 80051ac:	0800523b 	.word	0x0800523b
 80051b0:	0800523b 	.word	0x0800523b
 80051b4:	0800523b 	.word	0x0800523b
 80051b8:	0800523b 	.word	0x0800523b
 80051bc:	0800523b 	.word	0x0800523b
 80051c0:	0800523b 	.word	0x0800523b
 80051c4:	0800523b 	.word	0x0800523b
 80051c8:	0800523b 	.word	0x0800523b
 80051cc:	0800523b 	.word	0x0800523b
 80051d0:	0800523b 	.word	0x0800523b
 80051d4:	0800522d 	.word	0x0800522d
 80051d8:	2b40      	cmp	r3, #64	@ 0x40
 80051da:	d02a      	beq.n	8005232 <UART_SetConfig+0x8aa>
 80051dc:	e02d      	b.n	800523a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80051de:	f7fe ff61 	bl	80040a4 <HAL_RCCEx_GetD3PCLK1Freq>
 80051e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80051e4:	e02f      	b.n	8005246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fe ff70 	bl	80040d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80051f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051f4:	e027      	b.n	8005246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051f6:	f107 0318 	add.w	r3, r7, #24
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff f8bc 	bl	8004378 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005204:	e01f      	b.n	8005246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005206:	4b21      	ldr	r3, [pc, #132]	@ (800528c <UART_SetConfig+0x904>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005212:	4b1e      	ldr	r3, [pc, #120]	@ (800528c <UART_SetConfig+0x904>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	08db      	lsrs	r3, r3, #3
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	4a1d      	ldr	r2, [pc, #116]	@ (8005294 <UART_SetConfig+0x90c>)
 800521e:	fa22 f303 	lsr.w	r3, r2, r3
 8005222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005224:	e00f      	b.n	8005246 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005226:	4b1b      	ldr	r3, [pc, #108]	@ (8005294 <UART_SetConfig+0x90c>)
 8005228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800522a:	e00c      	b.n	8005246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800522c:	4b1a      	ldr	r3, [pc, #104]	@ (8005298 <UART_SetConfig+0x910>)
 800522e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005230:	e009      	b.n	8005246 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005238:	e005      	b.n	8005246 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005244:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 81ee 	beq.w	800562a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005252:	4a12      	ldr	r2, [pc, #72]	@ (800529c <UART_SetConfig+0x914>)
 8005254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005258:	461a      	mov	r2, r3
 800525a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800525c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005260:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	4413      	add	r3, r2
 800526c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800526e:	429a      	cmp	r2, r3
 8005270:	d305      	bcc.n	800527e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800527a:	429a      	cmp	r2, r3
 800527c:	d910      	bls.n	80052a0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005284:	e1d1      	b.n	800562a <UART_SetConfig+0xca2>
 8005286:	bf00      	nop
 8005288:	40011c00 	.word	0x40011c00
 800528c:	58024400 	.word	0x58024400
 8005290:	58000c00 	.word	0x58000c00
 8005294:	03d09000 	.word	0x03d09000
 8005298:	003d0900 	.word	0x003d0900
 800529c:	08005d28 	.word	0x08005d28
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052a2:	2200      	movs	r2, #0
 80052a4:	60bb      	str	r3, [r7, #8]
 80052a6:	60fa      	str	r2, [r7, #12]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ac:	4ac0      	ldr	r2, [pc, #768]	@ (80055b0 <UART_SetConfig+0xc28>)
 80052ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2200      	movs	r2, #0
 80052b6:	603b      	str	r3, [r7, #0]
 80052b8:	607a      	str	r2, [r7, #4]
 80052ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052c2:	f7fb f823 	bl	800030c <__aeabi_uldivmod>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4610      	mov	r0, r2
 80052cc:	4619      	mov	r1, r3
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	f04f 0300 	mov.w	r3, #0
 80052d6:	020b      	lsls	r3, r1, #8
 80052d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052dc:	0202      	lsls	r2, r0, #8
 80052de:	6979      	ldr	r1, [r7, #20]
 80052e0:	6849      	ldr	r1, [r1, #4]
 80052e2:	0849      	lsrs	r1, r1, #1
 80052e4:	2000      	movs	r0, #0
 80052e6:	460c      	mov	r4, r1
 80052e8:	4605      	mov	r5, r0
 80052ea:	eb12 0804 	adds.w	r8, r2, r4
 80052ee:	eb43 0905 	adc.w	r9, r3, r5
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	469a      	mov	sl, r3
 80052fa:	4693      	mov	fp, r2
 80052fc:	4652      	mov	r2, sl
 80052fe:	465b      	mov	r3, fp
 8005300:	4640      	mov	r0, r8
 8005302:	4649      	mov	r1, r9
 8005304:	f7fb f802 	bl	800030c <__aeabi_uldivmod>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4613      	mov	r3, r2
 800530e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005312:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005316:	d308      	bcc.n	800532a <UART_SetConfig+0x9a2>
 8005318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800531e:	d204      	bcs.n	800532a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005326:	60da      	str	r2, [r3, #12]
 8005328:	e17f      	b.n	800562a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005330:	e17b      	b.n	800562a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800533a:	f040 80bd 	bne.w	80054b8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800533e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005342:	2b20      	cmp	r3, #32
 8005344:	dc48      	bgt.n	80053d8 <UART_SetConfig+0xa50>
 8005346:	2b00      	cmp	r3, #0
 8005348:	db7b      	blt.n	8005442 <UART_SetConfig+0xaba>
 800534a:	2b20      	cmp	r3, #32
 800534c:	d879      	bhi.n	8005442 <UART_SetConfig+0xaba>
 800534e:	a201      	add	r2, pc, #4	@ (adr r2, 8005354 <UART_SetConfig+0x9cc>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	080053df 	.word	0x080053df
 8005358:	080053e7 	.word	0x080053e7
 800535c:	08005443 	.word	0x08005443
 8005360:	08005443 	.word	0x08005443
 8005364:	080053ef 	.word	0x080053ef
 8005368:	08005443 	.word	0x08005443
 800536c:	08005443 	.word	0x08005443
 8005370:	08005443 	.word	0x08005443
 8005374:	080053ff 	.word	0x080053ff
 8005378:	08005443 	.word	0x08005443
 800537c:	08005443 	.word	0x08005443
 8005380:	08005443 	.word	0x08005443
 8005384:	08005443 	.word	0x08005443
 8005388:	08005443 	.word	0x08005443
 800538c:	08005443 	.word	0x08005443
 8005390:	08005443 	.word	0x08005443
 8005394:	0800540f 	.word	0x0800540f
 8005398:	08005443 	.word	0x08005443
 800539c:	08005443 	.word	0x08005443
 80053a0:	08005443 	.word	0x08005443
 80053a4:	08005443 	.word	0x08005443
 80053a8:	08005443 	.word	0x08005443
 80053ac:	08005443 	.word	0x08005443
 80053b0:	08005443 	.word	0x08005443
 80053b4:	08005443 	.word	0x08005443
 80053b8:	08005443 	.word	0x08005443
 80053bc:	08005443 	.word	0x08005443
 80053c0:	08005443 	.word	0x08005443
 80053c4:	08005443 	.word	0x08005443
 80053c8:	08005443 	.word	0x08005443
 80053cc:	08005443 	.word	0x08005443
 80053d0:	08005443 	.word	0x08005443
 80053d4:	08005435 	.word	0x08005435
 80053d8:	2b40      	cmp	r3, #64	@ 0x40
 80053da:	d02e      	beq.n	800543a <UART_SetConfig+0xab2>
 80053dc:	e031      	b.n	8005442 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053de:	f7fd fc95 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 80053e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80053e4:	e033      	b.n	800544e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053e6:	f7fd fca7 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 80053ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80053ec:	e02f      	b.n	800544e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fe fe6c 	bl	80040d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053fc:	e027      	b.n	800544e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053fe:	f107 0318 	add.w	r3, r7, #24
 8005402:	4618      	mov	r0, r3
 8005404:	f7fe ffb8 	bl	8004378 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800540c:	e01f      	b.n	800544e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800540e:	4b69      	ldr	r3, [pc, #420]	@ (80055b4 <UART_SetConfig+0xc2c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	d009      	beq.n	800542e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800541a:	4b66      	ldr	r3, [pc, #408]	@ (80055b4 <UART_SetConfig+0xc2c>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	08db      	lsrs	r3, r3, #3
 8005420:	f003 0303 	and.w	r3, r3, #3
 8005424:	4a64      	ldr	r2, [pc, #400]	@ (80055b8 <UART_SetConfig+0xc30>)
 8005426:	fa22 f303 	lsr.w	r3, r2, r3
 800542a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800542c:	e00f      	b.n	800544e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800542e:	4b62      	ldr	r3, [pc, #392]	@ (80055b8 <UART_SetConfig+0xc30>)
 8005430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005432:	e00c      	b.n	800544e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005434:	4b61      	ldr	r3, [pc, #388]	@ (80055bc <UART_SetConfig+0xc34>)
 8005436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005438:	e009      	b.n	800544e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800543a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800543e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005440:	e005      	b.n	800544e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800544c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800544e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80ea 	beq.w	800562a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545a:	4a55      	ldr	r2, [pc, #340]	@ (80055b0 <UART_SetConfig+0xc28>)
 800545c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005460:	461a      	mov	r2, r3
 8005462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005464:	fbb3 f3f2 	udiv	r3, r3, r2
 8005468:	005a      	lsls	r2, r3, #1
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	441a      	add	r2, r3
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	fbb2 f3f3 	udiv	r3, r2, r3
 800547a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800547c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547e:	2b0f      	cmp	r3, #15
 8005480:	d916      	bls.n	80054b0 <UART_SetConfig+0xb28>
 8005482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005488:	d212      	bcs.n	80054b0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800548a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548c:	b29b      	uxth	r3, r3
 800548e:	f023 030f 	bic.w	r3, r3, #15
 8005492:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005496:	085b      	lsrs	r3, r3, #1
 8005498:	b29b      	uxth	r3, r3
 800549a:	f003 0307 	and.w	r3, r3, #7
 800549e:	b29a      	uxth	r2, r3
 80054a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80054a2:	4313      	orrs	r3, r2
 80054a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80054ac:	60da      	str	r2, [r3, #12]
 80054ae:	e0bc      	b.n	800562a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80054b6:	e0b8      	b.n	800562a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80054bc:	2b20      	cmp	r3, #32
 80054be:	dc4b      	bgt.n	8005558 <UART_SetConfig+0xbd0>
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f2c0 8087 	blt.w	80055d4 <UART_SetConfig+0xc4c>
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	f200 8084 	bhi.w	80055d4 <UART_SetConfig+0xc4c>
 80054cc:	a201      	add	r2, pc, #4	@ (adr r2, 80054d4 <UART_SetConfig+0xb4c>)
 80054ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d2:	bf00      	nop
 80054d4:	0800555f 	.word	0x0800555f
 80054d8:	08005567 	.word	0x08005567
 80054dc:	080055d5 	.word	0x080055d5
 80054e0:	080055d5 	.word	0x080055d5
 80054e4:	0800556f 	.word	0x0800556f
 80054e8:	080055d5 	.word	0x080055d5
 80054ec:	080055d5 	.word	0x080055d5
 80054f0:	080055d5 	.word	0x080055d5
 80054f4:	0800557f 	.word	0x0800557f
 80054f8:	080055d5 	.word	0x080055d5
 80054fc:	080055d5 	.word	0x080055d5
 8005500:	080055d5 	.word	0x080055d5
 8005504:	080055d5 	.word	0x080055d5
 8005508:	080055d5 	.word	0x080055d5
 800550c:	080055d5 	.word	0x080055d5
 8005510:	080055d5 	.word	0x080055d5
 8005514:	0800558f 	.word	0x0800558f
 8005518:	080055d5 	.word	0x080055d5
 800551c:	080055d5 	.word	0x080055d5
 8005520:	080055d5 	.word	0x080055d5
 8005524:	080055d5 	.word	0x080055d5
 8005528:	080055d5 	.word	0x080055d5
 800552c:	080055d5 	.word	0x080055d5
 8005530:	080055d5 	.word	0x080055d5
 8005534:	080055d5 	.word	0x080055d5
 8005538:	080055d5 	.word	0x080055d5
 800553c:	080055d5 	.word	0x080055d5
 8005540:	080055d5 	.word	0x080055d5
 8005544:	080055d5 	.word	0x080055d5
 8005548:	080055d5 	.word	0x080055d5
 800554c:	080055d5 	.word	0x080055d5
 8005550:	080055d5 	.word	0x080055d5
 8005554:	080055c7 	.word	0x080055c7
 8005558:	2b40      	cmp	r3, #64	@ 0x40
 800555a:	d037      	beq.n	80055cc <UART_SetConfig+0xc44>
 800555c:	e03a      	b.n	80055d4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800555e:	f7fd fbd5 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 8005562:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005564:	e03c      	b.n	80055e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005566:	f7fd fbe7 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 800556a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800556c:	e038      	b.n	80055e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800556e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005572:	4618      	mov	r0, r3
 8005574:	f7fe fdac 	bl	80040d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800557c:	e030      	b.n	80055e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800557e:	f107 0318 	add.w	r3, r7, #24
 8005582:	4618      	mov	r0, r3
 8005584:	f7fe fef8 	bl	8004378 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800558c:	e028      	b.n	80055e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800558e:	4b09      	ldr	r3, [pc, #36]	@ (80055b4 <UART_SetConfig+0xc2c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b00      	cmp	r3, #0
 8005598:	d012      	beq.n	80055c0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800559a:	4b06      	ldr	r3, [pc, #24]	@ (80055b4 <UART_SetConfig+0xc2c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	08db      	lsrs	r3, r3, #3
 80055a0:	f003 0303 	and.w	r3, r3, #3
 80055a4:	4a04      	ldr	r2, [pc, #16]	@ (80055b8 <UART_SetConfig+0xc30>)
 80055a6:	fa22 f303 	lsr.w	r3, r2, r3
 80055aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055ac:	e018      	b.n	80055e0 <UART_SetConfig+0xc58>
 80055ae:	bf00      	nop
 80055b0:	08005d28 	.word	0x08005d28
 80055b4:	58024400 	.word	0x58024400
 80055b8:	03d09000 	.word	0x03d09000
 80055bc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80055c0:	4b24      	ldr	r3, [pc, #144]	@ (8005654 <UART_SetConfig+0xccc>)
 80055c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055c4:	e00c      	b.n	80055e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80055c6:	4b24      	ldr	r3, [pc, #144]	@ (8005658 <UART_SetConfig+0xcd0>)
 80055c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055ca:	e009      	b.n	80055e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055d2:	e005      	b.n	80055e0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80055de:	bf00      	nop
    }

    if (pclk != 0U)
 80055e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d021      	beq.n	800562a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ea:	4a1c      	ldr	r2, [pc, #112]	@ (800565c <UART_SetConfig+0xcd4>)
 80055ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055f0:	461a      	mov	r2, r3
 80055f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	085b      	lsrs	r3, r3, #1
 80055fe:	441a      	add	r2, r3
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	fbb2 f3f3 	udiv	r3, r2, r3
 8005608:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800560a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800560c:	2b0f      	cmp	r3, #15
 800560e:	d909      	bls.n	8005624 <UART_SetConfig+0xc9c>
 8005610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005616:	d205      	bcs.n	8005624 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561a:	b29a      	uxth	r2, r3
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	60da      	str	r2, [r3, #12]
 8005622:	e002      	b.n	800562a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2201      	movs	r2, #1
 800562e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2201      	movs	r2, #1
 8005636:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2200      	movs	r2, #0
 800563e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2200      	movs	r2, #0
 8005644:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005646:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800564a:	4618      	mov	r0, r3
 800564c:	3748      	adds	r7, #72	@ 0x48
 800564e:	46bd      	mov	sp, r7
 8005650:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005654:	03d09000 	.word	0x03d09000
 8005658:	003d0900 	.word	0x003d0900
 800565c:	08005d28 	.word	0x08005d28

08005660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566c:	f003 0308 	and.w	r3, r3, #8
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00a      	beq.n	800568a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d2:	f003 0304 	and.w	r3, r3, #4
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f4:	f003 0310 	and.w	r3, r3, #16
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00a      	beq.n	8005712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573c:	2b00      	cmp	r3, #0
 800573e:	d01a      	beq.n	8005776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800575a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800575e:	d10a      	bne.n	8005776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	605a      	str	r2, [r3, #4]
  }
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b098      	sub	sp, #96	@ 0x60
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057b4:	f7fb fbfe 	bl	8000fb4 <HAL_GetTick>
 80057b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d12f      	bne.n	8005828 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057d0:	2200      	movs	r2, #0
 80057d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f88e 	bl	80058f8 <UART_WaitOnFlagUntilTimeout>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d022      	beq.n	8005828 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	461a      	mov	r2, r3
 80057fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005800:	647b      	str	r3, [r7, #68]	@ 0x44
 8005802:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800580e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e6      	bne.n	80057e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e063      	b.n	80058f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b04      	cmp	r3, #4
 8005834:	d149      	bne.n	80058ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005836:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800583e:	2200      	movs	r2, #0
 8005840:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f857 	bl	80058f8 <UART_WaitOnFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d03c      	beq.n	80058ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	623b      	str	r3, [r7, #32]
   return(result);
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005864:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800586e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005870:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800587c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e6      	bne.n	8005850 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3308      	adds	r3, #8
 8005888:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	60fb      	str	r3, [r7, #12]
   return(result);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f023 0301 	bic.w	r3, r3, #1
 8005898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3308      	adds	r3, #8
 80058a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058a2:	61fa      	str	r2, [r7, #28]
 80058a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	69b9      	ldr	r1, [r7, #24]
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	617b      	str	r3, [r7, #20]
   return(result);
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e5      	bne.n	8005882 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2220      	movs	r2, #32
 80058ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e012      	b.n	80058f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3758      	adds	r7, #88	@ 0x58
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005908:	e04f      	b.n	80059aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d04b      	beq.n	80059aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005912:	f7fb fb4f 	bl	8000fb4 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	429a      	cmp	r2, r3
 8005920:	d302      	bcc.n	8005928 <UART_WaitOnFlagUntilTimeout+0x30>
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e04e      	b.n	80059ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0304 	and.w	r3, r3, #4
 8005936:	2b00      	cmp	r3, #0
 8005938:	d037      	beq.n	80059aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	2b80      	cmp	r3, #128	@ 0x80
 800593e:	d034      	beq.n	80059aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2b40      	cmp	r3, #64	@ 0x40
 8005944:	d031      	beq.n	80059aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	f003 0308 	and.w	r3, r3, #8
 8005950:	2b08      	cmp	r3, #8
 8005952:	d110      	bne.n	8005976 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2208      	movs	r2, #8
 800595a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 f839 	bl	80059d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2208      	movs	r2, #8
 8005966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e029      	b.n	80059ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005980:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005984:	d111      	bne.n	80059aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800598e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 f81f 	bl	80059d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e00f      	b.n	80059ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69da      	ldr	r2, [r3, #28]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4013      	ands	r3, r2
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	bf0c      	ite	eq
 80059ba:	2301      	moveq	r3, #1
 80059bc:	2300      	movne	r3, #0
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	461a      	mov	r2, r3
 80059c2:	79fb      	ldrb	r3, [r7, #7]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d0a0      	beq.n	800590a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b095      	sub	sp, #84	@ 0x54
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80059fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e6      	bne.n	80059dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3308      	adds	r3, #8
 8005a14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	4b1e      	ldr	r3, [pc, #120]	@ (8005a9c <UART_EndRxTransfer+0xc8>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1e5      	bne.n	8005a0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d118      	bne.n	8005a7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	e853 3f00 	ldrex	r3, [r3]
 8005a56:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f023 0310 	bic.w	r3, r3, #16
 8005a5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	461a      	mov	r2, r3
 8005a66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a68:	61bb      	str	r3, [r7, #24]
 8005a6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6c:	6979      	ldr	r1, [r7, #20]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	e841 2300 	strex	r3, r2, [r1]
 8005a74:	613b      	str	r3, [r7, #16]
   return(result);
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e6      	bne.n	8005a4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005a90:	bf00      	nop
 8005a92:	3754      	adds	r7, #84	@ 0x54
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	effffffe 	.word	0xeffffffe

08005aa0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e027      	b.n	8005b06 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2224      	movs	r2, #36	@ 0x24
 8005ac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0201 	bic.w	r2, r2, #1
 8005adc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005ae4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d101      	bne.n	8005b2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e02d      	b.n	8005b86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2224      	movs	r2, #36	@ 0x24
 8005b36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0201 	bic.w	r2, r2, #1
 8005b50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f850 	bl	8005c0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b084      	sub	sp, #16
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e02d      	b.n	8005c02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2224      	movs	r2, #36	@ 0x24
 8005bb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 0201 	bic.w	r2, r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f812 	bl	8005c0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d108      	bne.n	8005c2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c2c:	e031      	b.n	8005c92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c2e:	2310      	movs	r3, #16
 8005c30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c32:	2310      	movs	r3, #16
 8005c34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	0e5b      	lsrs	r3, r3, #25
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	0f5b      	lsrs	r3, r3, #29
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c56:	7bbb      	ldrb	r3, [r7, #14]
 8005c58:	7b3a      	ldrb	r2, [r7, #12]
 8005c5a:	4911      	ldr	r1, [pc, #68]	@ (8005ca0 <UARTEx_SetNbDataToProcess+0x94>)
 8005c5c:	5c8a      	ldrb	r2, [r1, r2]
 8005c5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c62:	7b3a      	ldrb	r2, [r7, #12]
 8005c64:	490f      	ldr	r1, [pc, #60]	@ (8005ca4 <UARTEx_SetNbDataToProcess+0x98>)
 8005c66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c68:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	7b7a      	ldrb	r2, [r7, #13]
 8005c78:	4909      	ldr	r1, [pc, #36]	@ (8005ca0 <UARTEx_SetNbDataToProcess+0x94>)
 8005c7a:	5c8a      	ldrb	r2, [r1, r2]
 8005c7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c80:	7b7a      	ldrb	r2, [r7, #13]
 8005c82:	4908      	ldr	r1, [pc, #32]	@ (8005ca4 <UARTEx_SetNbDataToProcess+0x98>)
 8005c84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c86:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005c92:	bf00      	nop
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	08005d40 	.word	0x08005d40
 8005ca4:	08005d48 	.word	0x08005d48

08005ca8 <memset>:
 8005ca8:	4402      	add	r2, r0
 8005caa:	4603      	mov	r3, r0
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d100      	bne.n	8005cb2 <memset+0xa>
 8005cb0:	4770      	bx	lr
 8005cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8005cb6:	e7f9      	b.n	8005cac <memset+0x4>

08005cb8 <__libc_init_array>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	4d0d      	ldr	r5, [pc, #52]	@ (8005cf0 <__libc_init_array+0x38>)
 8005cbc:	4c0d      	ldr	r4, [pc, #52]	@ (8005cf4 <__libc_init_array+0x3c>)
 8005cbe:	1b64      	subs	r4, r4, r5
 8005cc0:	10a4      	asrs	r4, r4, #2
 8005cc2:	2600      	movs	r6, #0
 8005cc4:	42a6      	cmp	r6, r4
 8005cc6:	d109      	bne.n	8005cdc <__libc_init_array+0x24>
 8005cc8:	4d0b      	ldr	r5, [pc, #44]	@ (8005cf8 <__libc_init_array+0x40>)
 8005cca:	4c0c      	ldr	r4, [pc, #48]	@ (8005cfc <__libc_init_array+0x44>)
 8005ccc:	f000 f818 	bl	8005d00 <_init>
 8005cd0:	1b64      	subs	r4, r4, r5
 8005cd2:	10a4      	asrs	r4, r4, #2
 8005cd4:	2600      	movs	r6, #0
 8005cd6:	42a6      	cmp	r6, r4
 8005cd8:	d105      	bne.n	8005ce6 <__libc_init_array+0x2e>
 8005cda:	bd70      	pop	{r4, r5, r6, pc}
 8005cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce0:	4798      	blx	r3
 8005ce2:	3601      	adds	r6, #1
 8005ce4:	e7ee      	b.n	8005cc4 <__libc_init_array+0xc>
 8005ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cea:	4798      	blx	r3
 8005cec:	3601      	adds	r6, #1
 8005cee:	e7f2      	b.n	8005cd6 <__libc_init_array+0x1e>
 8005cf0:	08005d58 	.word	0x08005d58
 8005cf4:	08005d58 	.word	0x08005d58
 8005cf8:	08005d58 	.word	0x08005d58
 8005cfc:	08005d5c 	.word	0x08005d5c

08005d00 <_init>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	bf00      	nop
 8005d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d06:	bc08      	pop	{r3}
 8005d08:	469e      	mov	lr, r3
 8005d0a:	4770      	bx	lr

08005d0c <_fini>:
 8005d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0e:	bf00      	nop
 8005d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d12:	bc08      	pop	{r3}
 8005d14:	469e      	mov	lr, r3
 8005d16:	4770      	bx	lr
